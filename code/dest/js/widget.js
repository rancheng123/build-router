function Pager(e,t){
//限定只接受两个参数
if(arguments.length>2)throw new Error("The Function number of parameters error.");
//原始参数集合
var i={startNum:1,viewNum:5,allNum:10,pageSize:10,isForeAft:!0,ellipsis:"...",callback:function(){}},n=Object.prototype.toString,r={
//核心构造方法，处理分页数据与DOM渲染处理
createHTML:function(e){var t=$("<ul>"),n="<li>",r={
//p: "&lt;",
//n: "&gt;",
p:"上一页",n:"下一页",f:"首页",l:"尾页"},s="on",a="ellipsis",o="firstPage",l="lastPage",u="prePage",c="nextPage",d="pager",h="",f="",p={0:r.f+"|"+o,1:r.p+"|"+u,2:i.ellipsis+"|"+a},m={0:i.ellipsis+"|"+a,1:r.n+"|"+c,2:r.l+"|"+l};e&&0!=e&&(i.startNum=e);var g=i.viewNum+2,v=Math.floor(i.viewNum/2),b=0;i.allNum==i.viewNum&&(h="none",f="none"),i.allNum<i.viewNum?(b=1,g=i.allNum+2,h="none",f="none"):i.startNum<i.viewNum?(b=1,h="none"):i.startNum+v<i.allNum?b=i.startNum-v:(b=i.allNum-(i.viewNum-1),f="none");for(var y=0;y<g;y++){var x=$(n);if(i.isForeAft&&0==y)for(var _ in p){var w=$(n),F=p[_].split("|");"1"==_&&w.addClass(h),w.html(F[0]).addClass(F[1]).appendTo(t)}else if(i.isForeAft&&y==g-1)for(var C in m){var S=$(n),k=m[C].split("|");"0"==C&&S.addClass(f),S.html(k[0]).addClass(k[1]).appendTo(t)}else{b==i.startNum&&x.addClass(s);var D=b++;x.attr("data-num",D).html(D).appendTo(t)}}
//增加选择几页   跳页
/*var selectLi = $('<li class="li-select-popation" style="">每页' +
                    '<div class="selected w70 select-popation ">' +
                    '<div class="selectMain">' +
                    '<input type="hidden" value="" />' +
                    '<i index-data="" class="seleInput"></i>' +

                    '<ul class="none">' +
                        //'<li index-data="5"'+(self.pageSize=='5'?'class=active':'')+'><span>5</a></span>' +
                    '<li index-data="10"'+(self.pageSize=='10'?'class=active':'')+'><span>10</a></span>' +
                    '<li index-data="20"'+(self.pageSize=='20'?'class=active':'')+'><span>20</a></span>' +
                    '<li index-data="30"'+(self.pageSize=='30'?'class=active':'')+'><span>30</a></span>' +
                    '<li index-data="50"'+(self.pageSize=='50'?'class=active':'')+'><span>50</a></span>' +
                    '<li index-data="100"'+(self.pageSize=='100'?'class=active':'')+'><span>100</a></span>' +

                    '</ul>' +
                    '</div>' +
                    '</div>条' +
                    '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;共'+ self.totalCount +'条，跳转到第<input class="toPageInput" type="text">页<li class="toPage">确定</li></li>').appendTo(_ul);




                selected(function(i){

                    self.pageSize = i;
                    self.one(1);
                }, selectLi.find('.select-popation'));*/
//隐藏省略号
return i.hideFirstAndLast&&t.find(".firstPage ,.lastPage").hide(),i.hideEllipsis&&t.find(".ellipsis").hide(),t.addClass(d),t},isString:function(e){return"[object String]"===n.call(e)},isObject:function(e){return"[object Object]"===n.call(e)}},t=[].slice.call(arguments).pop();
//初始化构造函数
this.init=function(){
//页数 = 总条数/每页条数
return this.iD=r.isString(e)?$(e):e,r.isObject(t)&&($.extend(i,t),i.allNum=Math.ceil(i.totalCount/i.pageSize),this.num=i.startNum,this.totalNum=i.allNum,this._callback=i.callback,this.pageSize=i.pageSize,this.totalCount=i.totalCount),r}.call(this)}/**
     * Created by xiaofengyun on 2016/7/25.
     */
function R_select(e){
//填充数据
function t(e,t){var i=null;$.each(t,function(t,n){n.id==e&&(i=n)});var n=i.name;c.html(n).css("color","#000").attr("data-id",e)}var i=e.jqueryEle,n=e.clickFn,r=e.data,s=e.render,
//默认选中项
a=e.selectId;i.html(""),$('<div class="select-ipt"><div class="select-tit select-click"><span class="select-text">请选择</span><i class="drop-down"></i></div><div class="select-con select-option"><ul class="select-ul clearfix"></ul></div></div>').appendTo(i);var o=i.find(".select-ul");if(r&&r.length){var l="";$.each(r,function(e,t){l+=s(e,t)}),$(l).appendTo(o)}var u=i.find(".select-click"),c=i.find(".select-text"),d=i.find(".select-option");//点击选项
u.click(function(e){e.stopPropagation(),d.is(":visible")?d.slideUp():d.slideDown()}),$(document).click(function(e){d.is(e.target)||0!==d.has(e.target).length||d.is(":visible")&&d.slideUp()}),d.find("li").click(function(){t($(this).attr("data-id"),r),/*changeText.html($(this).find('span').html()).css("color","#000")
                .attr('data-id',$(this).attr('data-id'));*/
d.slideToggle(),n&&n.call(this,{changeText:c,isSelected:"请选择"!=c.text()})}),"undefined"!=typeof a&&""!=a&&null!=a&&t(a,r)}/**
 * Created by xiaofengyun on 2016/8/3.
 */
function showBigImage(e){
//图片展示
function t(e){r=e.find("img").eq(n).attr("src"),$(".pic-wrap").html("<img src="+r+">"),i($(".preview-pop"))}
//获取图片盒子的容器
function i(e){a=e.width(),o=e.height(),e.css({marginLeft:-a/2,marginTop:-o/2})}$('<div class="preview-shade"></div><div class="preview-pop"><div class="closed"></div><div class="pic-wrap"></div><div class="btns"><a href="javascript:;" class="pre-btn"></a><a href="javascript:;" class="next-btn"></a></div></div>').appendTo($("body"));var n,r,s,a,o,l,u=e.jqueryEle,c=$(".preview-shade"),d=$(".preview-pop"),h=$(".pre-btn"),f=$(".next-btn");u.on("click","img",function(){l=$(this).parent(),s=l.children("img").length-1,c.show(),d.show(),n=$(this).index(),t(l),s>1?$(".btns").show():$(".btns").hide()}),
//前一张
h.click(function(){n--,n<0&&(n=s),t(l)}),
//下一张
f.click(function(){n++,n>s&&(n=0),t(l)}),$(".closed").click(function(){c.hide(),d.hide()})}var eventSystem=function(){var e={},t={on:function(t,i,n){e[t]||(e[t]={}),e[t][i]||(e[t][i]=[]),e[t][i].push(n)},off:function(t,i){return e[t]?void(i?delete e[t][i]:delete e[t]):void console.error("没有"+t+"此宿主")},trigger:function(t,i){if(!e[t])return void console.error("没有"+t+"此宿主");if(!e[t][i])return void console.error("没有"+i+"此事件");for(var n=e[t][i],r=0;r<n.length;r++)n[r]()}};return t}(),R_cropImage={cache:{},init:function(e){var t=this,i=e.img;e.where;$.extend(t.cache,{opts:e}),t.destory(),$('<div id="jcrop-cover">').appendTo($("body"));/*测试  start*/
//var imgSrc = './crop/1.jpg';
/*测试  end*/
var n=new Image;n.src=i,n.onload=function(){var e=$('<div id="jcrop-wapper"><div class="Jcrop-where"><img id="targetImg" src="'+i+'"></div><div class="Jcrop-control"><span class="Jcrop-cancle">取消</span><span class="Jcrop-ok">确定</span></div></div>').appendTo($("body")),n=this.width,r=this.height,s=.8*$(window).width(),a=.8*$(window).height(),o=150,l=150;if(n<o)var u=o;else if(n>=o&&n<=s)var u=n;else if(n>s)var u=s;if(r<l)var c=l;else if(r>=l&&r<=a)var c=r;else if(r>a)var c=a;e.css({marginLeft:-u/2,marginTop:-c/2}),e.find(".Jcrop-where").css({width:u,overflowX:n>=s?"scroll":"hidden",height:c,overflowY:r>=a?"scroll":"hidden"}),e.find(".Jcrop-ok").click(function(){t.cutImg(),t.destory()}),e.find(".Jcrop-cancle").click(function(){t.destory()});var d=$("#targetImg");d.Jcrop({addClass:"img-cut",bgColor:"black",bgOpacity:.4,shade:!0,onSelect:function(){t.cache.api=this},
//选框 最小宽高
minSize:[280,210],
//选框 宽高比例（固定比例）
aspectRatio:4/3},function(){api=this,api.setSelect([130,65,330,215])})}},cutImg:function(){var e=this,t=e.cache.api,i=e.cache.opts.phpUrl,n=e.cache.opts.cutSuccess,r=t.tellSelect(),s=t.getWidgetSize();/*
             *
             imageH:333,
             imageRotate:0,
             imageSource:"http://www.js-css.cn/jscode/focus/focus19/images/b2.jpg",
             imageW:500,
             imageX:0,
             imageY:13.5,
             selectorH:200,
             selectorW:150,
             selectorX:175,
             selectorY:80,
             viewPortH:360,
             viewPortW:500

             */
$.ajax({url:i,//'resize_and_crop.php',
type:"post",data:{
//pathOutput:that.cache.opts.path_output,
imageRotate:0,imageSource:e.cache.opts.img,imageW:s[0],imageH:s[1],imageX:0,imageY:0,
//svg
viewPortW:s[0],viewPortH:s[1],
//选框
selectorH:r.h,selectorW:r.w,selectorX:r.x,selectorY:r.y},success:function(e){n&&n(e)}})},destory:function(){$("#jcrop-wapper, #jcrop-cover").remove()}};/**
 * jquery.Jcrop.js v0.9.12
 * jQuery Image Cropping Plugin - released under MIT License 
 * Author: Kelly Hallman <khallman@gmail.com>
 * http://github.com/tapmodo/Jcrop
 * Copyright (c) 2008-2013 Tapmodo Interactive LLC {{{
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * }}}
 */
!function(e){e.Jcrop=function(t,i){
// Internal Methods {{{
function n(e){return Math.round(e)+"px"}function r(e){return H.baseClass+"-"+e}function s(){return e.fx.step.hasOwnProperty("backgroundColor")}function a(t){var i=e(t).offset();return[i.left,i.top]}
//}}}
function o(e){return[e.pageX-z[0],e.pageY-z[1]]}
//}}}
function l(t){"object"!=typeof t&&(t={}),H=e.extend(H,t),e.each(["onChange","onSelect","onRelease","onDblClick"],function(e,t){"function"!=typeof H[t]&&(H[t]=function(){})})}
//}}}
function u(e,t,i){if(z=a(B),pe.setCursor("move"===e?e:e+"-resize"),"move"===e)return pe.activateHandlers(d(t),g,i);var n=de.getFixed(),r=h(e),s=de.getCorner(h(r));de.setPressed(de.getCorner(r)),de.setCurrent(s),pe.activateHandlers(c(e,n),g,i)}
//}}}
function c(e,t){return function(i){if(H.aspectRatio)switch(e){case"e":i[1]=t.y+1;break;case"w":i[1]=t.y+1;break;case"n":i[0]=t.x+1;break;case"s":i[0]=t.x+1}else switch(e){case"e":i[1]=t.y2;break;case"w":i[1]=t.y2;break;case"n":i[0]=t.x2;break;case"s":i[0]=t.x2}de.setCurrent(i),fe.update()}}
//}}}
function d(e){var t=e;return me.watchKeys(),function(e){de.moveOffset([e[0]-t[0],e[1]-t[1]]),t=e,fe.update()}}
//}}}
function h(e){switch(e){case"n":return"sw";case"s":return"nw";case"e":return"nw";case"w":return"ne";case"ne":return"sw";case"nw":return"se";case"se":return"nw";case"sw":return"ne"}}
//}}}
function f(e){return function(t){
// Fix position of crop area when dragged the very first time.
// Necessary when crop image is in a hidden element when page is loaded.
return!H.disabled&&(!("move"===e&&!H.allowMove)&&(z=a(B),ne=!0,u(e,o(t)),t.stopPropagation(),t.preventDefault(),!1))}}
//}}}
function p(e,t,i){var n=e.width(),r=e.height();n>t&&t>0&&(n=t,r=t/e.width()*e.height()),r>i&&i>0&&(r=i,n=i/e.height()*e.width()),te=e.width()/n,ie=e.height()/r,e.width(n).height(r)}
//}}}
function m(e){return{x:e.x*te,y:e.y*ie,x2:e.x2*te,y2:e.y2*ie,w:e.w*te,h:e.h*ie}}
//}}}
function g(e){var t=de.getFixed();t.w>H.minSelect[0]&&t.h>H.minSelect[1]?(fe.enableHandles(),fe.done()):fe.release(),pe.setCursor(H.allowSelect?"crosshair":"default")}
//}}}
function v(e){if(H.disabled)return!1;if(!H.allowSelect)return!1;ne=!0,z=a(B),fe.disableHandles(),pe.setCursor("crosshair");var t=o(e);return de.setPressed(t),fe.update(),pe.activateHandlers(b,g,"touch"===e.type.substring(0,5)),me.watchKeys(),e.stopPropagation(),e.preventDefault(),!1}
//}}}
function b(e){de.setCurrent(e),fe.update()}
//}}}
function y(){var t=e("<div></div>").addClass(r("tracker"));return O&&t.css({opacity:0,backgroundColor:"white"}),t}
//}}}
// }}}
// API methods {{{
function x(e){X.removeClass().addClass(r("holder")).addClass(e)}
//}}}
function _(e,t){function i(){window.setTimeout(b,d)}var n=e[0]/te,r=e[1]/ie,s=e[2]/te,a=e[3]/ie;if(!re){var o=de.flipCoords(n,r,s,a),l=de.getFixed(),u=[l.x,l.y,l.x2,l.y2],c=u,d=H.animationDelay,h=o[0]-u[0],f=o[1]-u[1],p=o[2]-u[2],m=o[3]-u[3],g=0,v=H.swingSpeed;n=c[0],r=c[1],s=c[2],a=c[3],fe.animMode(!0);var b=function(){return function(){g+=(100-g)/v,c[0]=Math.round(n+g/100*h),c[1]=Math.round(r+g/100*f),c[2]=Math.round(s+g/100*p),c[3]=Math.round(a+g/100*m),g>=99.8&&(g=100),g<100?(F(c),i()):(fe.done(),fe.animMode(!1),"function"==typeof t&&t.call(ge))}}();i()}}
//}}}
function w(e){F([e[0]/te,e[1]/ie,e[2]/te,e[3]/ie]),H.onSelect.call(ge,m(de.getFixed())),fe.enableHandles()}
//}}}
function F(e){de.setPressed([e[0],e[1]]),de.setCurrent([e[2],e[3]]),fe.update()}
//}}}
function C(){return m(de.getFixed())}
//}}}
function S(){return de.getFixed()}
//}}}
function k(e){l(e),j()}
//}}}
function D(){H.disabled=!0,fe.disableHandles(),fe.setCursor("default"),pe.setCursor("default")}
//}}}
function T(){H.disabled=!1,j()}
//}}}
function E(){fe.done(),pe.activateHandlers(null,null)}
//}}}
function I(){X.remove(),N.show(),N.css("visibility","visible"),e(t).removeData("Jcrop")}
//}}}
function P(e,t){fe.release(),D();var i=new Image;i.onload=function(){var n=i.width,r=i.height,s=H.boxWidth,a=H.boxHeight;B.width(n).height(r),B.attr("src",e),J.attr("src",e),p(B,s,a),W=B.width(),U=B.height(),J.width(W).height(U),oe.width(W+2*ae).height(U+2*ae),X.width(W).height(U),he.resize(W,U),T(),"function"==typeof t&&t.call(ge)},i.src=e}
//}}}
function A(e,t,i){var n=t||H.bgColor;H.bgFade&&s()&&H.fadeTime&&!i?e.animate({backgroundColor:n},{queue:!1,duration:H.fadeTime}):e.css("backgroundColor",n)}function j(e){H.allowResize?e?fe.enableOnly():fe.enableHandles():fe.disableHandles(),pe.setCursor(H.allowSelect?"crosshair":"default"),fe.setCursor(H.allowMove?"move":"default"),H.hasOwnProperty("trueSize")&&(te=H.trueSize[0]/W,ie=H.trueSize[1]/U),H.hasOwnProperty("setSelect")&&(w(H.setSelect),fe.done(),delete H.setSelect),he.refresh(),H.bgColor!=le&&(A(H.shade?he.getShades():X,H.shade?H.shadeColor||H.bgColor:H.bgColor),le=H.bgColor),ue!=H.bgOpacity&&(ue=H.bgOpacity,H.shade?he.refresh():fe.setBgOpacity(ue)),Q=H.maxSize[0]||0,G=H.maxSize[1]||0,K=H.minSize[0]||0,ee=H.minSize[1]||0,H.hasOwnProperty("outerImage")&&(B.attr("src",H.outerImage),delete H.outerImage),fe.refresh()}var z,H=e.extend({},e.Jcrop.defaults),R=navigator.userAgent.toLowerCase(),O=/msie/.test(R),L=/msie [1-6]\./.test(R);
//}}}
// }}}
// Initialization {{{
// Sanitize some options {{{
"object"!=typeof t&&(t=e(t)[0]),"object"!=typeof i&&(i={}),
// }}}
l(i);
// Initialize some jQuery objects {{{
// The values are SET on the image(s) for the interface
// If the original image has any of these set, they will be reset
// However, if you destroy() the Jcrop instance the original image's
// character in the DOM will be as you left it.
var $={border:"none",visibility:"visible",margin:0,padding:0,position:"absolute",top:0,left:0},N=e(t),q=!0;if("IMG"==t.tagName){
// Fix size of crop image.
// Necessary when crop image is within a hidden element when page is loaded.
if(0!=N[0].width&&0!=N[0].height)
// Obtain dimensions from contained img element.
N.width(N[0].width),N.height(N[0].height);else{
// Obtain dimensions from temporary image in case the original is not loaded yet (e.g. IE 7.0). 
var M=new Image;M.src=N[0].src,N.width(M.width),N.height(M.height)}var B=N.clone().removeAttr("id").css($).show();B.width(N.width()),B.height(N.height()),N.after(B).hide()}else B=N.css($).show(),q=!1,null===H.shade&&(H.shade=!0);p(B,H.boxWidth,H.boxHeight);var W=B.width(),U=B.height(),X=e("<div />").width(W).height(U).addClass(r("holder")).css({position:"relative",backgroundColor:H.bgColor}).insertAfter(N).append(B);H.addClass&&X.addClass(H.addClass);var J=e("<div />"),Z=e("<div />").width("100%").height("100%").css({zIndex:310,position:"absolute",overflow:"hidden"}),Y=e("<div />").width("100%").height("100%").css("zIndex",320),V=e("<div />").css({position:"absolute",zIndex:600}).dblclick(function(){var e=de.getFixed();H.onDblClick.call(ge,e)}).insertBefore(B).append(Z,Y);q&&(J=e("<img />").attr("src",B.attr("src")).css($).width(W).height(U),Z.append(J)),L&&V.css({overflowY:"hidden"});var Q,G,K,ee,te,ie,ne,re,se,ae=H.boundary,oe=y().width(W+2*ae).height(U+2*ae).css({position:"absolute",top:n(-ae),left:n(-ae),zIndex:290}).mousedown(v),le=H.bgColor,ue=H.bgOpacity;z=a(B);
// }}}
// }}}
// Internal Modules {{{
// Touch Module {{{ 
var ce=function(){
// Touch support detection function adapted (under MIT License)
// from code by Jeffrey Sambells - http://github.com/iamamused/
function e(){var e,t={},i=["touchstart","touchmove","touchend"],n=document.createElement("div");try{for(e=0;e<i.length;e++){var r=i[e];r="on"+r;var s=r in n;s||(n.setAttribute(r,"return;"),s="function"==typeof n[r]),t[i[e]]=s}return t.touchstart&&t.touchend&&t.touchmove}catch(a){return!1}}function t(){return H.touchSupport===!0||H.touchSupport===!1?H.touchSupport:e()}return{createDragger:function(e){return function(t){return!H.disabled&&(!("move"===e&&!H.allowMove)&&(z=a(B),ne=!0,u(e,o(ce.cfilter(t)),!0),t.stopPropagation(),t.preventDefault(),!1))}},newSelection:function(e){return v(ce.cfilter(e))},cfilter:function(e){return e.pageX=e.originalEvent.changedTouches[0].pageX,e.pageY=e.originalEvent.changedTouches[0].pageY,e},isSupported:e,support:t()}}(),de=function(){function e(e){e=a(e),p=h=e[0],m=f=e[1]}
//}}}
function t(e){e=a(e),c=e[0]-p,d=e[1]-m,p=e[0],m=e[1]}
//}}}
function i(){return[c,d]}
//}}}
function n(e){var t=e[0],i=e[1];0>h+t&&(t-=t+h),0>f+i&&(i-=i+f),U<m+i&&(i+=U-(m+i)),W<p+t&&(t+=W-(p+t)),h+=t,p+=t,f+=i,m+=i}
//}}}
function r(e){var t=s();switch(e){case"ne":return[t.x2,t.y];case"nw":return[t.x,t.y];case"se":return[t.x2,t.y2];case"sw":return[t.x,t.y2]}}
//}}}
function s(){if(!H.aspectRatio)return l();
// This function could use some optimization I think...
var e,t,i,n,r=H.aspectRatio,s=H.minSize[0]/te,
//min_y = options.minSize[1]/yscale,
a=H.maxSize[0]/te,c=H.maxSize[1]/ie,d=p-h,g=m-f,v=Math.abs(d),b=Math.abs(g),y=v/b;
// Magic %-)
// right side
// left side
return 0===a&&(a=10*W),0===c&&(c=10*U),y<r?(t=m,i=b*r,e=d<0?h-i:i+h,e<0?(e=0,n=Math.abs((e-h)/r),t=g<0?f-n:n+f):e>W&&(e=W,n=Math.abs((e-h)/r),t=g<0?f-n:n+f)):(e=p,n=v/r,t=g<0?f-n:f+n,t<0?(t=0,i=Math.abs((t-f)*r),e=d<0?h-i:i+h):t>U&&(t=U,i=Math.abs(t-f)*r,e=d<0?h-i:i+h)),e>h?(e-h<s?e=h+s:e-h>a&&(e=h+a),t=t>f?f+(e-h)/r:f-(e-h)/r):e<h&&(h-e<s?e=h-s:h-e>a&&(e=h-a),t=t>f?f+(h-e)/r:f-(h-e)/r),e<0?(h-=e,e=0):e>W&&(h-=e-W,e=W),t<0?(f-=t,t=0):t>U&&(f-=t-U,t=U),u(o(h,f,e,t))}
//}}}
function a(e){return e[0]<0&&(e[0]=0),e[1]<0&&(e[1]=0),e[0]>W&&(e[0]=W),e[1]>U&&(e[1]=U),[Math.round(e[0]),Math.round(e[1])]}
//}}}
function o(e,t,i,n){var r=e,s=i,a=t,o=n;return i<e&&(r=i,s=e),n<t&&(a=n,o=t),[r,a,s,o]}
//}}}
function l(){var e,t=p-h,i=m-f;return Q&&Math.abs(t)>Q&&(p=t>0?h+Q:h-Q),G&&Math.abs(i)>G&&(m=i>0?f+G:f-G),ee/ie&&Math.abs(i)<ee/ie&&(m=i>0?f+ee/ie:f-ee/ie),K/te&&Math.abs(t)<K/te&&(p=t>0?h+K/te:h-K/te),h<0&&(p-=h,h-=h),f<0&&(m-=f,f-=f),p<0&&(h-=p,p-=p),m<0&&(f-=m,m-=m),p>W&&(e=p-W,h-=e,p-=e),m>U&&(e=m-U,f-=e,m-=e),h>W&&(e=h-U,m-=e,f-=e),f>U&&(e=f-U,m-=e,f-=e),u(o(h,f,p,m))}
//}}}
function u(e){return{x:e[0],y:e[1],x2:e[2],y2:e[3],w:e[2]-e[0],h:e[3]-e[1]}}var c,d,h=0,f=0,p=0,m=0;
//}}}
return{flipCoords:o,setPressed:e,setCurrent:t,getOffset:i,moveOffset:n,getCorner:r,getFixed:s}}(),he=function(){function t(e,t){p.left.css({height:n(t)}),p.right.css({height:n(t)})}function i(){return r(de.getFixed())}function r(e){p.top.css({left:n(e.x),width:n(e.w),height:n(e.y)}),p.bottom.css({top:n(e.y2),left:n(e.x),width:n(e.w),height:n(U-e.y2)}),p.right.css({left:n(e.x2),width:n(W-e.x2)}),p.left.css({width:n(e.x)})}function s(){return e("<div />").css({position:"absolute",backgroundColor:H.shadeColor||H.bgColor}).appendTo(f)}function a(){h||(h=!0,f.insertBefore(B),i(),fe.setBgOpacity(1,0,1),J.hide(),o(H.shadeColor||H.bgColor,1),fe.isAwake()?u(H.bgOpacity,1):u(1,1))}function o(e,t){A(d(),e,t)}function l(){h&&(f.remove(),J.show(),h=!1,fe.isAwake()?fe.setBgOpacity(H.bgOpacity,1,1):(fe.setBgOpacity(1,1,1),fe.disableHandles()),A(X,0,1))}function u(e,t){h&&(H.bgFade&&!t?f.animate({opacity:1-e},{queue:!1,duration:H.fadeTime}):f.css({opacity:1-e}))}function c(){H.shade?a():l(),fe.isAwake()&&u(H.bgOpacity)}function d(){return f.children()}var h=!1,f=e("<div />").css({position:"absolute",zIndex:240,opacity:0}),p={top:s(),left:s().height(U),right:s().height(U),bottom:s()};return{update:i,updateRaw:r,getShades:d,setBgColor:o,enable:a,disable:l,resize:t,refresh:c,opacity:u}}(),fe=function(){
// Private Methods
function t(t){var i=e("<div />").css({position:"absolute",opacity:H.borderOpacity}).addClass(r(t));return Z.append(i),i}
//}}}
function i(t,i){var n=e("<div />").mousedown(f(t)).css({cursor:t+"-resize",position:"absolute",zIndex:i}).addClass("ord-"+t);return ce.support&&n.bind("touchstart.jcrop",ce.createDragger(t)),Y.append(n),n}
//}}}
function s(e){var t=H.handleSize,n=i(e,D++).css({opacity:H.handleOpacity}).addClass(r("handle"));return t&&n.width(t).height(t),n}
//}}}
function a(e){return i(e,D++).addClass("jcrop-dragbar")}
//}}}
function o(e){var t;for(t=0;t<e.length;t++)I[e[t]]=a(e[t])}
//}}}
function l(e){var i,n;for(n=0;n<e.length;n++){switch(e[n]){case"n":i="hline";break;case"s":i="hline bottom";break;case"e":i="vline right";break;case"w":i="vline"}T[e[n]]=t(i)}}
//}}}
function u(e){var t;for(t=0;t<e.length;t++)E[e[t]]=s(e[t])}
//}}}
function c(e,t){H.shade||J.css({top:n(-t),left:n(-e)}),V.css({top:n(t),left:n(e)})}
//}}}
function d(e,t){V.width(Math.round(e)).height(Math.round(t))}
//}}}
function h(){var e=de.getFixed();de.setPressed([e.x,e.y]),de.setCurrent([e.x2,e.y2]),p()}
//}}}
// Internal Methods
function p(e){if(k)return g(e)}
//}}}
function g(e){var t=de.getFixed();d(t.w,t.h),c(t.x,t.y),H.shade&&he.updateRaw(t),k||b(),e?H.onSelect.call(ge,m(t)):H.onChange.call(ge,m(t))}
//}}}
function v(e,t,i){(k||t)&&(H.bgFade&&!i?B.animate({opacity:e},{queue:!1,duration:H.fadeTime}):B.css("opacity",e))}
//}}}
function b(){V.show(),H.shade?he.opacity(ue):v(ue,!0),k=!0}
//}}}
function x(){F(),V.hide(),H.shade?he.opacity(1):v(1),k=!1,H.onRelease.call(ge)}
//}}}
function _(){P&&Y.show()}
//}}}
function w(){if(P=!0,H.allowResize)return Y.show(),!0}
//}}}
function F(){P=!1,Y.hide()}
//}}}
function C(e){e?(re=!0,F()):(re=!1,w())}
//}}}
function S(){C(!1),h()}var k,D=370,T={},E={},I={},P=!1;
//}}}
// Insert draggable elements {{{
// Insert border divs for outline
H.dragEdges&&e.isArray(H.createDragbars)&&o(H.createDragbars),e.isArray(H.createHandles)&&u(H.createHandles),H.drawBorders&&e.isArray(H.createBorders)&&l(H.createBorders),
//}}}
// This is a hack for iOS5 to support drag/move touch functionality
e(document).bind("touchstart.jcrop-ios",function(t){e(t.currentTarget).hasClass("jcrop-tracker")&&t.stopPropagation()});var A=y().mousedown(f("move")).css({cursor:"move",position:"absolute",zIndex:360});return ce.support&&A.bind("touchstart.jcrop",ce.createDragger("move")),Z.append(A),F(),{updateVisible:p,update:g,release:x,refresh:h,isAwake:function(){return k},setCursor:function(e){A.css("cursor",e)},enableHandles:w,enableOnly:function(){P=!0},showHandles:_,disableHandles:F,animMode:C,setBgOpacity:v,done:S}}(),pe=function(){function t(t){oe.css({zIndex:450}),t?e(document).bind("touchmove.jcrop",a).bind("touchend.jcrop",l):h&&e(document).bind("mousemove.jcrop",n).bind("mouseup.jcrop",r)}
//}}}
function i(){oe.css({zIndex:290}),e(document).unbind(".jcrop")}
//}}}
function n(e){return c(o(e)),!1}
//}}}
function r(e){return e.preventDefault(),e.stopPropagation(),ne&&(ne=!1,d(o(e)),fe.isAwake()&&H.onSelect.call(ge,m(de.getFixed())),i(),c=function(){},d=function(){}),!1}
//}}}
function s(e,i,n){return ne=!0,c=e,d=i,t(n),!1}
//}}}
function a(e){return c(o(ce.cfilter(e))),!1}
//}}}
function l(e){return r(ce.cfilter(e))}
//}}}
function u(e){oe.css("cursor",e)}var c=function(){},d=function(){},h=H.trackDocument;
//}}}
return h||oe.mousemove(n).mouseup(r).mouseout(r),B.before(oe),{activateHandlers:s,setCursor:u}}(),me=function(){function t(){H.keySupport&&(s.show(),s.focus())}
//}}}
function i(e){s.hide()}
//}}}
function n(e,t,i){H.allowMove&&(de.moveOffset([t,i]),fe.updateVisible(!0)),e.preventDefault(),e.stopPropagation()}
//}}}
function r(e){if(e.ctrlKey||e.metaKey)return!0;se=!!e.shiftKey;var t=se?10:1;switch(e.keyCode){case 37:n(e,-t,0);break;case 39:n(e,t,0);break;case 38:n(e,0,-t);break;case 40:n(e,0,t);break;case 27:H.allowSelect&&fe.release();break;case 9:return!0}return!1}var s=e('<input type="radio" />').css({position:"fixed",left:"-120px",width:"12px"}).addClass("jcrop-keymgr"),a=e("<div />").css({position:"absolute",overflow:"hidden"}).append(s);
//}}}
return H.keySupport&&(s.keydown(r).blur(i),L||!H.fixedSupport?(s.css({position:"absolute",left:"-20px"}),a.append(s).insertBefore(B)):s.insertBefore(B)),{watchKeys:t}}();
//}}}
//}}}
ce.support&&oe.bind("touchstart.jcrop",ce.newSelection),Y.hide(),j(!0);var ge={setImage:P,animateTo:_,setSelect:w,setOptions:k,tellSelect:C,tellScaled:S,setClass:x,disable:D,enable:T,cancel:E,release:fe.release,destroy:I,focus:me.watchKeys,getBounds:function(){return[W*te,U*ie]},getWidgetSize:function(){return[W,U]},getScaleFactor:function(){return[te,ie]},getOptions:function(){
// careful: internal values are returned
return H},ui:{holder:X,selection:V}};return O&&X.bind("selectstart",function(){return!1}),N.data("Jcrop",ge),ge},e.fn.Jcrop=function(t,i){var n;
// Return "this" so the object is chainable (jQuery-style)
// Iterate over each object, attach Jcrop
return this.each(function(){
// If we've already attached to this object
if(e(this).data("Jcrop")){
// The API can be requested this way (undocumented)
if("api"===t)return e(this).data("Jcrop");e(this).data("Jcrop").setOptions(t)}else"IMG"==this.tagName?e.Jcrop.Loader(this,function(){e(this).css({display:"block",visibility:"hidden"}),n=e.Jcrop(this,t),e.isFunction(i)&&i.call(n)}):(e(this).css({display:"block",visibility:"hidden"}),n=e.Jcrop(this,t),e.isFunction(i)&&i.call(n))}),this},
//}}}
// $.Jcrop.Loader - basic image loader {{{
e.Jcrop.Loader=function(t,i,n){function r(){a.complete?(s.unbind(".jcloader"),e.isFunction(i)&&i.call(a)):window.setTimeout(r,50)}var s=e(t),a=s[0];s.bind("load.jcloader",r).bind("error.jcloader",function(t){s.unbind(".jcloader"),e.isFunction(n)&&n.call(a)}),a.complete&&e.isFunction(i)&&(s.unbind(".jcloader"),i.call(a))},
//}}}
// Global Defaults {{{
e.Jcrop.defaults={
// Basic Settings
allowSelect:!0,allowMove:!0,allowResize:!0,trackDocument:!0,
// Styling Options
baseClass:"jcrop",addClass:null,bgColor:"black",bgOpacity:.6,bgFade:!1,borderOpacity:.4,handleOpacity:.5,handleSize:null,aspectRatio:0,keySupport:!0,createHandles:["n","s","e","w","nw","ne","se","sw"],createDragbars:["n","s","e","w"],createBorders:["n","s","e","w"],drawBorders:!0,dragEdges:!0,fixedSupport:!0,touchSupport:null,shade:null,boxWidth:0,boxHeight:0,boundary:2,fadeTime:400,animationDelay:20,swingSpeed:3,minSelect:[0,0],maxSize:[0,0],minSize:[0,0],
// Callbacks / Event Handlers
onChange:function(){},onSelect:function(){},onDblClick:function(){},onRelease:function(){}}}(jQuery);
//api文档
//https://github.com/blueimp/jQuery-File-Upload/wiki/API
var R_fileUpload={init:function(e){var t=e.where,i=e.url,n=e.formData,r=e.success,s="fileupload"+(new Date).getTime(),a=$('<div style="position:absolute;width:100%;height:100%;overflow: hidden;top: 0px;left:0px;opacity: 0;filter:alpha(opacity=0)"><input id="'+s+'" type="file" name="image" style="width:10000px;height:10000px;cursor: pointer"></div>').appendTo(t),o=a.fileupload({url:i,formData:n,dataType:"json",add:function(t,i){
//防止多个请求同时发送
if(!o.ajaxSending){
//文件类型
if(e.FileTypes){var n=i.files[0].name,r=n.substring(n.lastIndexOf(".")+1),s=new RegExp(e.FileTypes.rule,"i");if(!s.test(r))return void alert(e.FileTypes.error)}
//文件大小
if(e.FileSizeLimit){var a=i.files[0].size,l=e.FileSizeLimit.rule;if(a>l)return void alert(e.FileSizeLimit.error)}i.submit(),o.ajaxSending=!0}},done:function(e,t){r&&r(e,t),o.ajaxSending=!1}});return o}};
//# sourceURL=fileUpload.js
/*
 * jQuery File Upload Plugin 5.40.0
 * https://github.com/blueimp/jQuery-File-Upload
 *
 * Copyright 2010, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */
/* jshint nomen:false */
/* global define, window, document, location, Blob, FormData */
!function(e){"use strict";e(window.jQuery)}(function(e){"use strict";
// Detect file input support, based on
// http://viljamis.com/blog/2012/file-upload-support-on-mobile/
e.support.fileInput=!(new RegExp(
// Handle devices which give false positives for the feature detection:
"(Android (1\\.[0156]|2\\.[01]))|(Windows Phone (OS 7|8\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)|(w(eb)?OSBrowser)|(webOS)|(Kindle/(1\\.0|2\\.[05]|3\\.0))").test(window.navigator.userAgent)||
// Feature detection for all other devices:
e('<input type="file">').prop("disabled")),
// The FileReader API is not actually used, but works as feature detection,
// as some Safari versions (5?) support XHR file uploads via the FormData API,
// but not non-multipart XHR file uploads.
// window.XMLHttpRequestUpload is not available on IE10, so we check for
// window.ProgressEvent instead to detect XHR2 file upload capability:
e.support.xhrFileUpload=!(!window.ProgressEvent||!window.FileReader),e.support.xhrFormDataFileUpload=!!window.FormData,
// Detect support for Blob slicing (required for chunked uploads):
e.support.blobSlice=window.Blob&&(Blob.prototype.slice||Blob.prototype.webkitSlice||Blob.prototype.mozSlice),
// The fileupload widget listens for change events on file input fields defined
// via fileInput setting and paste or drop events of the given dropZone.
// In addition to the default jQuery Widget methods, the fileupload widget
// exposes the "add" and "send" methods, to add or directly send files using
// the fileupload API.
// By default, files added via file input selection, paste, drag & drop or
// "add" method are uploaded immediately, but it is possible to override
// the "add" callback option to queue file uploads.
e.widget("blueimp.fileupload",{options:{
// The drop target element(s), by the default the complete document.
// Set to null to disable drag & drop support:
dropZone:e(document),
// The paste target element(s), by the default the complete document.
// Set to null to disable paste support:
pasteZone:e(document),
// The file input field(s), that are listened to for change events.
// If undefined, it is set to the file input fields inside
// of the widget element on plugin initialization.
// Set to null to disable the change listener.
fileInput:void 0,
// By default, the file input field is replaced with a clone after
// each input field change event. This is required for iframe transport
// queues and allows change events to be fired for the same file
// selection, but can be disabled by setting the following option to false:
replaceFileInput:!0,
// The parameter name for the file form data (the request argument name).
// If undefined or empty, the name property of the file input field is
// used, or "files[]" if the file input name property is also empty,
// can be a string or an array of strings:
paramName:void 0,
// By default, each file of a selection is uploaded using an individual
// request for XHR type uploads. Set to false to upload file
// selections in one request each:
singleFileUploads:!0,
// To limit the number of files uploaded with one XHR request,
// set the following option to an integer greater than 0:
limitMultiFileUploads:void 0,
// The following option limits the number of files uploaded with one
// XHR request to keep the request size under or equal to the defined
// limit in bytes:
limitMultiFileUploadSize:void 0,
// Multipart file uploads add a number of bytes to each uploaded file,
// therefore the following option adds an overhead for each file used
// in the limitMultiFileUploadSize configuration:
limitMultiFileUploadSizeOverhead:512,
// Set the following option to true to issue all file upload requests
// in a sequential order:
sequentialUploads:!1,
// To limit the number of concurrent uploads,
// set the following option to an integer greater than 0:
limitConcurrentUploads:void 0,
// Set the following option to true to force iframe transport uploads:
forceIframeTransport:!1,
// Set the following option to the location of a redirect url on the
// origin server, for cross-domain iframe transport uploads:
redirect:void 0,
// The parameter name for the redirect url, sent as part of the form
// data and set to 'redirect' if this option is empty:
redirectParamName:void 0,
// Set the following option to the location of a postMessage window,
// to enable postMessage transport uploads:
postMessage:void 0,
// By default, XHR file uploads are sent as multipart/form-data.
// The iframe transport is always using multipart/form-data.
// Set to false to enable non-multipart XHR uploads:
multipart:!0,
// To upload large files in smaller chunks, set the following option
// to a preferred maximum chunk size. If set to 0, null or undefined,
// or the browser does not support the required Blob API, files will
// be uploaded as a whole.
maxChunkSize:void 0,
// When a non-multipart upload or a chunked multipart upload has been
// aborted, this option can be used to resume the upload by setting
// it to the size of the already uploaded bytes. This option is most
// useful when modifying the options object inside of the "add" or
// "send" callbacks, as the options are cloned for each file upload.
uploadedBytes:void 0,
// By default, failed (abort or error) file uploads are removed from the
// global progress calculation. Set the following option to false to
// prevent recalculating the global progress data:
recalculateProgress:!0,
// Interval in milliseconds to calculate and trigger progress events:
progressInterval:100,
// Interval in milliseconds to calculate progress bitrate:
bitrateInterval:500,
// By default, uploads are started automatically when adding files:
autoUpload:!0,
// Error and info messages:
messages:{uploadedBytes:"Uploaded bytes exceed file size"},
// Translation function, gets the message key to be translated
// and an object with context specific data as arguments:
i18n:function(t,i){return t=this.messages[t]||t.toString(),i&&e.each(i,function(e,i){t=t.replace("{"+e+"}",i)}),t},
// Additional form data to be sent along with the file uploads can be set
// using this option, which accepts an array of objects with name and
// value properties, a function returning such an array, a FormData
// object (for XHR file uploads), or a simple object.
// The form of the first fileInput is given as parameter to the function:
formData:function(e){return e.serializeArray()},
// The add callback is invoked as soon as files are added to the fileupload
// widget (via file input selection, drag & drop, paste or add API call).
// If the singleFileUploads option is enabled, this callback will be
// called once for each file in the selection for XHR file uploads, else
// once for each file selection.
//
// The upload starts when the submit method is invoked on the data parameter.
// The data object contains a files property holding the added files
// and allows you to override plugin options as well as define ajax settings.
//
// Listeners for this callback can also be bound the following way:
// .bind('fileuploadadd', func);
//
// data.submit() returns a Promise object and allows to attach additional
// handlers using jQuery's Deferred callbacks:
// data.submit().done(func).fail(func).always(func);
add:function(t,i){return!t.isDefaultPrevented()&&void((i.autoUpload||i.autoUpload!==!1&&e(this).fileupload("option","autoUpload"))&&i.process().done(function(){i.submit()}))},
// Other callbacks:
// Callback for the submit event of each file upload:
// submit: function (e, data) {}, // .bind('fileuploadsubmit', func);
// Callback for the start of each file upload request:
// send: function (e, data) {}, // .bind('fileuploadsend', func);
// Callback for successful uploads:
// done: function (e, data) {}, // .bind('fileuploaddone', func);
// Callback for failed (abort or error) uploads:
// fail: function (e, data) {}, // .bind('fileuploadfail', func);
// Callback for completed (success, abort or error) requests:
// always: function (e, data) {}, // .bind('fileuploadalways', func);
// Callback for upload progress events:
// progress: function (e, data) {}, // .bind('fileuploadprogress', func);
// Callback for global upload progress events:
// progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);
// Callback for uploads start, equivalent to the global ajaxStart event:
// start: function (e) {}, // .bind('fileuploadstart', func);
// Callback for uploads stop, equivalent to the global ajaxStop event:
// stop: function (e) {}, // .bind('fileuploadstop', func);
// Callback for change events of the fileInput(s):
// change: function (e, data) {}, // .bind('fileuploadchange', func);
// Callback for paste events to the pasteZone(s):
// paste: function (e, data) {}, // .bind('fileuploadpaste', func);
// Callback for drop events of the dropZone(s):
// drop: function (e, data) {}, // .bind('fileuploaddrop', func);
// Callback for dragover events of the dropZone(s):
// dragover: function (e) {}, // .bind('fileuploaddragover', func);
// Callback for the start of each chunk upload request:
// chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);
// Callback for successful chunk uploads:
// chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);
// Callback for failed (abort or error) chunk uploads:
// chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);
// Callback for completed (success, abort or error) chunk upload requests:
// chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);
// The plugin options are used as settings object for the ajax calls.
// The following are jQuery ajax settings required for the file uploads:
processData:!1,contentType:!1,cache:!1},
// A list of options that require reinitializing event listeners and/or
// special initialization code:
_specialOptions:["fileInput","dropZone","pasteZone","multipart","forceIframeTransport"],_blobSlice:e.support.blobSlice&&function(){var e=this.slice||this.webkitSlice||this.mozSlice;return e.apply(this,arguments)},_BitrateTimer:function(){this.timestamp=Date.now?Date.now():(new Date).getTime(),this.loaded=0,this.bitrate=0,this.getBitrate=function(e,t,i){var n=e-this.timestamp;return(!this.bitrate||!i||n>i)&&(this.bitrate=(t-this.loaded)*(1e3/n)*8,this.loaded=t,this.timestamp=e),this.bitrate}},_isXHRUpload:function(t){return!t.forceIframeTransport&&(!t.multipart&&e.support.xhrFileUpload||e.support.xhrFormDataFileUpload)},_getFormData:function(t){var i;return"function"===e.type(t.formData)?t.formData(t.form):e.isArray(t.formData)?t.formData:"object"===e.type(t.formData)?(i=[],e.each(t.formData,function(e,t){i.push({name:e,value:t})}),i):[]},_getTotal:function(t){var i=0;return e.each(t,function(e,t){i+=t.size||1}),i},_initProgressObject:function(t){var i={loaded:0,total:0,bitrate:0};t._progress?e.extend(t._progress,i):t._progress=i},_initResponseObject:function(e){var t;if(e._response)for(t in e._response)e._response.hasOwnProperty(t)&&delete e._response[t];else e._response={}},_onProgress:function(t,i){if(t.lengthComputable){var n,r=Date.now?Date.now():(new Date).getTime();if(i._time&&i.progressInterval&&r-i._time<i.progressInterval&&t.loaded!==t.total)return;i._time=r,n=Math.floor(t.loaded/t.total*(i.chunkSize||i._progress.total))+(i.uploadedBytes||0),
// Add the difference from the previously loaded state
// to the global loaded counter:
this._progress.loaded+=n-i._progress.loaded,this._progress.bitrate=this._bitrateTimer.getBitrate(r,this._progress.loaded,i.bitrateInterval),i._progress.loaded=i.loaded=n,i._progress.bitrate=i.bitrate=i._bitrateTimer.getBitrate(r,n,i.bitrateInterval),
// Trigger a custom progress event with a total data property set
// to the file size(s) of the current upload and a loaded data
// property calculated accordingly:
this._trigger("progress",e.Event("progress",{delegatedEvent:t}),i),
// Trigger a global progress event for all current file uploads,
// including ajax calls queued for sequential file uploads:
this._trigger("progressall",e.Event("progressall",{delegatedEvent:t}),this._progress)}},_initProgressListener:function(t){var i=this,n=t.xhr?t.xhr():e.ajaxSettings.xhr();
// Accesss to the native XHR object is required to add event listeners
// for the upload progress event:
n.upload&&(e(n.upload).bind("progress",function(e){var n=e.originalEvent;
// Make sure the progress event properties get copied over:
e.lengthComputable=n.lengthComputable,e.loaded=n.loaded,e.total=n.total,i._onProgress(e,t)}),t.xhr=function(){return n})},_isInstanceOf:function(e,t){
// Cross-frame instanceof check
return Object.prototype.toString.call(t)==="[object "+e+"]"},_initXHRData:function(t){var i,n=this,r=t.files[0],
// Ignore non-multipart setting if not supported:
s=t.multipart||!e.support.xhrFileUpload,a="array"===e.type(t.paramName)?t.paramName[0]:t.paramName;t.headers=e.extend({},t.headers),t.contentRange&&(t.headers["Content-Range"]=t.contentRange),s&&!t.blob&&this._isInstanceOf("File",r)||(t.headers["Content-Disposition"]='attachment; filename="'+encodeURI(r.name)+'"'),s?e.support.xhrFormDataFileUpload&&(t.postMessage?(
// window.postMessage does not allow sending FormData
// objects, so we just add the File/Blob objects to
// the formData array and let the postMessage window
// create the FormData object out of this array:
i=this._getFormData(t),t.blob?i.push({name:a,value:t.blob}):e.each(t.files,function(n,r){i.push({name:"array"===e.type(t.paramName)&&t.paramName[n]||a,value:r})})):(n._isInstanceOf("FormData",t.formData)?i=t.formData:(i=new FormData,e.each(this._getFormData(t),function(e,t){i.append(t.name,t.value)})),t.blob?i.append(a,t.blob,r.name):e.each(t.files,function(r,s){
// This check allows the tests to run with
// dummy objects:
(n._isInstanceOf("File",s)||n._isInstanceOf("Blob",s))&&i.append("array"===e.type(t.paramName)&&t.paramName[r]||a,s,s.uploadName||s.name)})),t.data=i):(t.contentType=r.type||"application/octet-stream",t.data=t.blob||r),
// Blob reference is not needed anymore, free memory:
t.blob=null},_initIframeSettings:function(t){var i=e("<a></a>").prop("href",t.url).prop("host");
// Setting the dataType to iframe enables the iframe transport:
t.dataType="iframe "+(t.dataType||""),
// The iframe transport accepts a serialized array as form data:
t.formData=this._getFormData(t),
// Add redirect url to form data on cross-domain uploads:
t.redirect&&i&&i!==location.host&&t.formData.push({name:t.redirectParamName||"redirect",value:t.redirect})},_initDataSettings:function(e){this._isXHRUpload(e)?(this._chunkedUpload(e,!0)||(e.data||this._initXHRData(e),this._initProgressListener(e)),e.postMessage&&(
// Setting the dataType to postmessage enables the
// postMessage transport:
e.dataType="postmessage "+(e.dataType||""))):this._initIframeSettings(e)},_getParamName:function(t){var i=e(t.fileInput),n=t.paramName;return n?e.isArray(n)||(n=[n]):(n=[],i.each(function(){for(var t=e(this),i=t.prop("name")||"files[]",r=(t.prop("files")||[1]).length;r;)n.push(i),r-=1}),n.length||(n=[i.prop("name")||"files[]"])),n},_initFormSettings:function(t){
// Retrieve missing options from the input field and the
// associated form, if available:
t.form&&t.form.length||(t.form=e(t.fileInput.prop("form")),
// If the given file input doesn't have an associated form,
// use the default widget file input's form:
t.form.length||(t.form=e(this.options.fileInput.prop("form")))),t.paramName=this._getParamName(t),t.url||(t.url=t.form.prop("action")||location.href),
// The HTTP request method must be "POST" or "PUT":
t.type=(t.type||"string"===e.type(t.form.prop("method"))&&t.form.prop("method")||"").toUpperCase(),"POST"!==t.type&&"PUT"!==t.type&&"PATCH"!==t.type&&(t.type="POST"),t.formAcceptCharset||(t.formAcceptCharset=t.form.attr("accept-charset"))},_getAJAXSettings:function(t){var i=e.extend({},this.options,t);return this._initFormSettings(i),this._initDataSettings(i),i},
// jQuery 1.6 doesn't provide .state(),
// while jQuery 1.8+ removed .isRejected() and .isResolved():
_getDeferredState:function(e){return e.state?e.state():e.isResolved()?"resolved":e.isRejected()?"rejected":"pending"},
// Maps jqXHR callbacks to the equivalent
// methods of the given Promise object:
_enhancePromise:function(e){return e.success=e.done,e.error=e.fail,e.complete=e.always,e},
// Creates and returns a Promise object enhanced with
// the jqXHR methods abort, success, error and complete:
_getXHRPromise:function(t,i,n){var r=e.Deferred(),s=r.promise();return i=i||this.options.context||s,t===!0?r.resolveWith(i,n):t===!1&&r.rejectWith(i,n),s.abort=r.promise,this._enhancePromise(s)},
// Adds convenience methods to the data callback argument:
_addConvenienceMethods:function(t,i){var n=this,r=function(t){return e.Deferred().resolveWith(n,t).promise()};i.process=function(t,s){return(t||s)&&(i._processQueue=this._processQueue=(this._processQueue||r([this])).pipe(function(){return i.errorThrown?e.Deferred().rejectWith(n,[i]).promise():r(arguments)}).pipe(t,s)),this._processQueue||r([this])},i.submit=function(){return"pending"!==this.state()&&(i.jqXHR=this.jqXHR=n._trigger("submit",e.Event("submit",{delegatedEvent:t}),this)!==!1&&n._onSend(t,this)),this.jqXHR||n._getXHRPromise()},i.abort=function(){return this.jqXHR?this.jqXHR.abort():(this.errorThrown="abort",n._trigger("fail",null,this),n._getXHRPromise(!1))},i.state=function(){return this.jqXHR?n._getDeferredState(this.jqXHR):this._processQueue?n._getDeferredState(this._processQueue):void 0},i.processing=function(){return!this.jqXHR&&this._processQueue&&"pending"===n._getDeferredState(this._processQueue)},i.progress=function(){return this._progress},i.response=function(){return this._response}},
// Parses the Range header from the server response
// and returns the uploaded bytes:
_getUploadedBytes:function(e){var t=e.getResponseHeader("Range"),i=t&&t.split("-"),n=i&&i.length>1&&parseInt(i[1],10);return n&&n+1},
// Uploads a file in multiple, sequential requests
// by splitting the file up in multiple blob chunks.
// If the second parameter is true, only tests if the file
// should be uploaded in chunks, but does not invoke any
// upload requests:
_chunkedUpload:function(t,i){t.uploadedBytes=t.uploadedBytes||0;var n,r,s=this,a=t.files[0],o=a.size,l=t.uploadedBytes,u=t.maxChunkSize||o,c=this._blobSlice,d=e.Deferred(),h=d.promise();
// The chunk upload method:
return!(!(this._isXHRUpload(t)&&c&&(l||u<o))||t.data)&&(!!i||(l>=o?(a.error=t.i18n("uploadedBytes"),this._getXHRPromise(!1,t.context,[null,"error",a.error])):(r=function(){
// Clone the options object for each chunk upload:
var i=e.extend({},t),h=i._progress.loaded;i.blob=c.call(a,l,l+u,a.type),
// Store the current chunk size, as the blob itself
// will be dereferenced after data processing:
i.chunkSize=i.blob.size,
// Expose the chunk bytes position range:
i.contentRange="bytes "+l+"-"+(l+i.chunkSize-1)+"/"+o,
// Process the upload data (the blob and potential form data):
s._initXHRData(i),
// Add progress listeners for this chunk upload:
s._initProgressListener(i),n=(s._trigger("chunksend",null,i)!==!1&&e.ajax(i)||s._getXHRPromise(!1,i.context)).done(function(n,a,u){l=s._getUploadedBytes(u)||l+i.chunkSize,
// Create a progress event if no final progress event
// with loaded equaling total has been triggered
// for this chunk:
h+i.chunkSize-i._progress.loaded&&s._onProgress(e.Event("progress",{lengthComputable:!0,loaded:l-i.uploadedBytes,total:l-i.uploadedBytes}),i),t.uploadedBytes=i.uploadedBytes=l,i.result=n,i.textStatus=a,i.jqXHR=u,s._trigger("chunkdone",null,i),s._trigger("chunkalways",null,i),l<o?
// File upload not yet complete,
// continue with the next chunk:
r():d.resolveWith(i.context,[n,a,u])}).fail(function(e,t,n){i.jqXHR=e,i.textStatus=t,i.errorThrown=n,s._trigger("chunkfail",null,i),s._trigger("chunkalways",null,i),d.rejectWith(i.context,[e,t,n])})},this._enhancePromise(h),h.abort=function(){return n.abort()},r(),h)))},_beforeSend:function(e,t){0===this._active&&(
// the start callback is triggered when an upload starts
// and no other uploads are currently running,
// equivalent to the global ajaxStart event:
this._trigger("start"),
// Set timer for global bitrate progress calculation:
this._bitrateTimer=new this._BitrateTimer,
// Reset the global progress values:
this._progress.loaded=this._progress.total=0,this._progress.bitrate=0),
// Make sure the container objects for the .response() and
// .progress() methods on the data object are available
// and reset to their initial state:
this._initResponseObject(t),this._initProgressObject(t),t._progress.loaded=t.loaded=t.uploadedBytes||0,t._progress.total=t.total=this._getTotal(t.files)||1,t._progress.bitrate=t.bitrate=0,this._active+=1,
// Initialize the global progress values:
this._progress.loaded+=t.loaded,this._progress.total+=t.total},_onDone:function(t,i,n,r){var s=r._progress.total,a=r._response;r._progress.loaded<s&&
// Create a progress event if no final progress event
// with loaded equaling total has been triggered:
this._onProgress(e.Event("progress",{lengthComputable:!0,loaded:s,total:s}),r),a.result=r.result=t,a.textStatus=r.textStatus=i,a.jqXHR=r.jqXHR=n,this._trigger("done",null,r)},_onFail:function(e,t,i,n){var r=n._response;n.recalculateProgress&&(
// Remove the failed (error or abort) file upload from
// the global progress calculation:
this._progress.loaded-=n._progress.loaded,this._progress.total-=n._progress.total),r.jqXHR=n.jqXHR=e,r.textStatus=n.textStatus=t,r.errorThrown=n.errorThrown=i,this._trigger("fail",null,n)},_onAlways:function(e,t,i,n){
// jqXHRorResult, textStatus and jqXHRorError are added to the
// options object via done and fail callbacks
this._trigger("always",null,n)},_onSend:function(t,i){i.submit||this._addConvenienceMethods(t,i);var n,r,s,a,o=this,l=o._getAJAXSettings(i),u=function(){
// Set timer for bitrate progress calculation:
/*//跨域请求
                    if(window.navigator.userAgent.indexOf('MSIE 9.0') != -1 || window.navigator.userAgent.indexOf('MSIE 8.0') != -1 || window.navigator.userAgent.indexOf('MSIE 7.0') != -1)
                    {
                        var xdr = new XDomainRequest();
                        jqXHR = xdr;
                        xdr.onload = function() {
                            that._onDone(xdr.responseText, textStatus, jqXHR, options);
                        };
                        xdr.onerror = function(e) {
                            alert('出错')
                        };
                        xdr.open(options.type, options.url);
                        xdr.send( JSON.stringify(options.formData) );
                    }
                    //其他浏览器
                    else{
                        jqXHR = $.ajax(options)
                        .done(function (result, textStatus, jqXHR) {
                            that._onDone(result, textStatus, jqXHR, options);
                        }).fail(function (jqXHR, textStatus, errorThrown) {
                            that._onFail(jqXHR, textStatus, errorThrown, options);
                        });

                    };
*/
return o._sending+=1,l._bitrateTimer=new o._BitrateTimer,n=n||((r||o._trigger("send",e.Event("send",{delegatedEvent:t}),l)===!1)&&o._getXHRPromise(!1,l.context,r)||o._chunkedUpload(l)||e.ajax(l)).done(function(e,t,i){o._onDone(e,t,i,l)}).fail(function(e,t,i){o._onFail(e,t,i,l)}).always(function(e,t,i){if(o._onAlways(e,t,i,l),o._sending-=1,o._active-=1,l.limitConcurrentUploads&&l.limitConcurrentUploads>o._sending)for(
// Start the next queued upload,
// that has not been aborted:
var n=o._slots.shift();n;){if("pending"===o._getDeferredState(n)){n.resolve();break}n=o._slots.shift()}0===o._active&&
// The stop callback is triggered when all uploads have
// been completed, equivalent to the global ajaxStop event:
o._trigger("stop")})};
// Return the piped Promise object, enhanced with an abort method,
// which is delegated to the jqXHR object of the current upload,
// and jqXHR callbacks mapped to the equivalent Promise methods:
return this._beforeSend(t,l),this.options.sequentialUploads||this.options.limitConcurrentUploads&&this.options.limitConcurrentUploads<=this._sending?(this.options.limitConcurrentUploads>1?(s=e.Deferred(),this._slots.push(s),a=s.pipe(u)):(this._sequence=this._sequence.pipe(u,u),a=this._sequence),a.abort=function(){return r=[void 0,"abort","abort"],n?n.abort():(s&&s.rejectWith(l.context,r),u())},this._enhancePromise(a)):u()},_onAdd:function(t,i){var n,r,s,a,o=this,l=!0,u=e.extend({},this.options,i),c=i.files,d=c.length,h=u.limitMultiFileUploads,f=u.limitMultiFileUploadSize,p=u.limitMultiFileUploadSizeOverhead,m=0,g=this._getParamName(u),v=0;if(!f||d&&void 0!==c[0].size||(f=void 0),(u.singleFileUploads||h||f)&&this._isXHRUpload(u))if(u.singleFileUploads||f||!h)if(!u.singleFileUploads&&f)for(s=[],n=[],a=0;a<d;a+=1)m+=c[a].size+p,(a+1===d||m+c[a+1].size+p>f||h&&a+1-v>=h)&&(s.push(c.slice(v,a+1)),r=g.slice(v,a+1),r.length||(r=g),n.push(r),v=a+1,m=0);else n=g;else for(s=[],n=[],a=0;a<d;a+=h)s.push(c.slice(a,a+h)),r=g.slice(a,a+h),r.length||(r=g),n.push(r);else s=[c],n=[g];return i.originalFiles=c,e.each(s||c,function(r,a){var u=e.extend({},i);return u.files=s?a:[a],u.paramName=n[r],o._initResponseObject(u),o._initProgressObject(u),o._addConvenienceMethods(t,u),l=o._trigger("add",e.Event("add",{delegatedEvent:t}),u)}),l},_replaceFileInput:function(t){var i=t.clone(!0);e("<form></form>").append(i)[0].reset(),
// Detaching allows to insert the fileInput on another form
// without loosing the file input value:
t.after(i).detach(),
// Avoid memory leaks with the detached file input:
e.cleanData(t.unbind("remove")),
// Replace the original file input element in the fileInput
// elements set with the clone, which has been copied including
// event handlers:
this.options.fileInput=this.options.fileInput.map(function(e,n){return n===t[0]?i[0]:n}),
// If the widget has been initialized on the file input itself,
// override this.element with the file input clone:
t[0]===this.element[0]&&(this.element=i)},_handleFileTreeEntry:function(t,i){var n,r=this,s=e.Deferred(),a=function(e){e&&!e.entry&&(e.entry=t),
// Since $.when returns immediately if one
// Deferred is rejected, we use resolve instead.
// This allows valid files and invalid items
// to be returned together in one set:
s.resolve([e])};
// Workaround for Chrome bug #149735
// Return an empy list for file system items
// other than files or directories:
return i=i||"",t.isFile?t._file?(t._file.relativePath=i,s.resolve(t._file)):t.file(function(e){e.relativePath=i,s.resolve(e)},a):t.isDirectory?(n=t.createReader(),n.readEntries(function(e){r._handleFileTreeEntries(e,i+t.name+"/").done(function(e){s.resolve(e)}).fail(a)},a)):s.resolve([]),s.promise()},_handleFileTreeEntries:function(t,i){var n=this;return e.when.apply(e,e.map(t,function(e){return n._handleFileTreeEntry(e,i)})).pipe(function(){return Array.prototype.concat.apply([],arguments)})},_getDroppedFiles:function(t){t=t||{};var i=t.items;return i&&i.length&&(i[0].webkitGetAsEntry||i[0].getAsEntry)?this._handleFileTreeEntries(e.map(i,function(e){var t;
// Workaround for Chrome bug #149735:
return e.webkitGetAsEntry?(t=e.webkitGetAsEntry(),t&&(t._file=e.getAsFile()),t):e.getAsEntry()})):e.Deferred().resolve(e.makeArray(t.files)).promise()},_getSingleFileInputFiles:function(t){t=e(t);var i,n,r=t.prop("webkitEntries")||t.prop("entries");if(r&&r.length)return this._handleFileTreeEntries(r);if(i=e.makeArray(t.prop("files")),i.length)void 0===i[0].name&&i[0].fileName&&
// File normalization for Safari 4 and Firefox 3:
e.each(i,function(e,t){t.name=t.fileName,t.size=t.fileSize});else{if(n=t.prop("value"),!n)return e.Deferred().resolve([]).promise();
// If the files property is not available, the browser does not
// support the File API and we add a pseudo File object with
// the input value as name with path information removed:
i=[{name:n.replace(/^.*\\/,"")}]}return e.Deferred().resolve(i).promise()},_getFileInputFiles:function(t){return t instanceof e&&1!==t.length?e.when.apply(e,e.map(t,this._getSingleFileInputFiles)).pipe(function(){return Array.prototype.concat.apply([],arguments)}):this._getSingleFileInputFiles(t)},_onChange:function(t){var i=this,n={fileInput:e(t.target),form:e(t.target.form)};this._getFileInputFiles(n.fileInput).always(function(r){n.files=r,i.options.replaceFileInput&&i._replaceFileInput(n.fileInput),i._trigger("change",e.Event("change",{delegatedEvent:t}),n)!==!1&&i._onAdd(t,n)})},_onPaste:function(t){var i=t.originalEvent&&t.originalEvent.clipboardData&&t.originalEvent.clipboardData.items,n={files:[]};i&&i.length&&(e.each(i,function(e,t){var i=t.getAsFile&&t.getAsFile();i&&n.files.push(i)}),this._trigger("paste",e.Event("paste",{delegatedEvent:t}),n)!==!1&&this._onAdd(t,n))},_onDrop:function(t){t.dataTransfer=t.originalEvent&&t.originalEvent.dataTransfer;var i=this,n=t.dataTransfer,r={};n&&n.files&&n.files.length&&(t.preventDefault(),this._getDroppedFiles(n).always(function(n){r.files=n,i._trigger("drop",e.Event("drop",{delegatedEvent:t}),r)!==!1&&i._onAdd(t,r)}))},_onDragOver:function(t){t.dataTransfer=t.originalEvent&&t.originalEvent.dataTransfer;var i=t.dataTransfer;i&&e.inArray("Files",i.types)!==-1&&this._trigger("dragover",e.Event("dragover",{delegatedEvent:t}))!==!1&&(t.preventDefault(),i.dropEffect="copy")},_initEventHandlers:function(){this._isXHRUpload(this.options)&&(this._on(this.options.dropZone,{dragover:this._onDragOver,drop:this._onDrop}),this._on(this.options.pasteZone,{paste:this._onPaste})),e.support.fileInput&&this._on(this.options.fileInput,{change:this._onChange})},_destroyEventHandlers:function(){this._off(this.options.dropZone,"dragover drop"),this._off(this.options.pasteZone,"paste"),this._off(this.options.fileInput,"change")},_setOption:function(t,i){var n=e.inArray(t,this._specialOptions)!==-1;n&&this._destroyEventHandlers(),this._super(t,i),n&&(this._initSpecialOptions(),this._initEventHandlers())},_initSpecialOptions:function(){var t=this.options;void 0===t.fileInput?t.fileInput=this.element.is('input[type="file"]')?this.element:this.element.find('input[type="file"]'):t.fileInput instanceof e||(t.fileInput=e(t.fileInput)),t.dropZone instanceof e||(t.dropZone=e(t.dropZone)),t.pasteZone instanceof e||(t.pasteZone=e(t.pasteZone))},_getRegExp:function(e){var t=e.split("/"),i=t.pop();return t.shift(),new RegExp(t.join("/"),i)},_isRegExpOption:function(t,i){return"url"!==t&&"string"===e.type(i)&&/^\/.*\/[igm]{0,3}$/.test(i)},_initDataAttributes:function(){var t=this,i=this.options;
// Initialize options set via HTML5 data-attributes:
e.each(e(this.element[0].cloneNode(!1)).data(),function(e,n){t._isRegExpOption(e,n)&&(n=t._getRegExp(n)),i[e]=n})},_create:function(){this._initDataAttributes(),this._initSpecialOptions(),this._slots=[],this._sequence=this._getXHRPromise(!0),this._sending=this._active=0,this._initProgressObject(this),this._initEventHandlers()},
// This method is exposed to the widget API and allows to query
// the number of active uploads:
active:function(){return this._active},
// This method is exposed to the widget API and allows to query
// the widget upload progress.
// It returns an object with loaded, total and bitrate properties
// for the running uploads:
progress:function(){return this._progress},
// This method is exposed to the widget API and allows adding files
// using the fileupload API. The data parameter accepts an object which
// must have a files property and can contain additional options:
// .fileupload('add', {files: filesList});
add:function(t){var i=this;t&&!this.options.disabled&&(t.fileInput&&!t.files?this._getFileInputFiles(t.fileInput).always(function(e){t.files=e,i._onAdd(null,t)}):(t.files=e.makeArray(t.files),this._onAdd(null,t)))},
// This method is exposed to the widget API and allows sending files
// using the fileupload API. The data parameter accepts an object which
// must have a files or fileInput property and can contain additional options:
// .fileupload('send', {files: filesList});
// The method returns a Promise object for the file upload call.
send:function(t){if(t&&!this.options.disabled){if(t.fileInput&&!t.files){var i,n,r=this,s=e.Deferred(),a=s.promise();return a.abort=function(){return n=!0,i?i.abort():(s.reject(null,"abort","abort"),a)},this._getFileInputFiles(t.fileInput).always(function(e){if(!n){if(!e.length)return void s.reject();t.files=e,i=r._onSend(null,t).then(function(e,t,i){s.resolve(e,t,i)},function(e,t,i){s.reject(e,t,i)})}}),this._enhancePromise(a)}if(t.files=e.makeArray(t.files),t.files.length)return this._onSend(null,t)}return this._getXHRPromise(!1,t&&t.context)}})}),
//# sourceURL=jquery.fileUpload.js
/*
 * jQuery Iframe Transport Plugin 1.8.2
 * https://github.com/blueimp/jQuery-File-Upload
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */
/* global define, window, document */
function(e){e(window.jQuery)}(function(e){"use strict";
// Helper variable to create unique names for the transport iframes:
var t=0;
// The iframe transport accepts four additional options:
// options.fileInput: a jQuery collection of file input fields
// options.paramName: the parameter name for the file form data,
//  overrides the name property of the file input field(s),
//  can be a string or an array of strings.
// options.formData: an array of objects with name and value properties,
//  equivalent to the return data of .serializeArray(), e.g.:
//  [{name: 'a', value: 1}, {name: 'b', value: 2}]
// options.initialIframeSrc: the URL of the initial iframe src,
//  by default set to "javascript:false;"
e.ajaxTransport("iframe",function(i){if(i.async){
// javascript:false as initial iframe src
// prevents warning popups on HTTPS in IE6:
/*jshint scripturl: true */
var/*jshint scripturl: false */
n,r,s,a=i.initialIframeSrc||"javascript:false;";return{send:function(o,l){n=e('<form style="display:none;"></form>'),n.attr("accept-charset",i.formAcceptCharset),s=/\?/.test(i.url)?"&":"?",
// XDomainRequest only supports GET and POST:
"DELETE"===i.type?(i.url=i.url+s+"_method=DELETE",i.type="POST"):"PUT"===i.type?(i.url=i.url+s+"_method=PUT",i.type="POST"):"PATCH"===i.type&&(i.url=i.url+s+"_method=PATCH",i.type="POST"),
// IE versions below IE8 cannot set the name property of
// elements that have already been added to the DOM,
// so we set the name along with the iframe HTML markup:
t+=1,r=e('<iframe src="'+a+'" name="iframe-transport-'+t+'"></iframe>').bind("load",function(){var t,s=e.isArray(i.paramName)?i.paramName:[i.paramName];r.unbind("load").bind("load",function(){var t;
// Wrap in a try/catch block to catch exceptions thrown
// when trying to access cross-domain iframe contents:
try{
// Google Chrome and Firefox do not throw an
// exception when calling iframe.contents() on
// cross-domain requests, so we unify the response:
if(t=r.contents(),!t.length||!t[0].firstChild)throw new Error}catch(i){t=void 0}
// The complete callback returns the
// iframe content document as response object:
l(200,"success",{iframe:t}),
// Fix for IE endless progress bar activity bug
// (happens on form submits to iframe targets):
e('<iframe src="'+a+'"></iframe>').appendTo(n),window.setTimeout(function(){
// Removing the form in a setTimeout call
// allows Chrome's developer tools to display
// the response result
n.remove()},0)}),n.prop("target",r.prop("name")).prop("action",i.url).prop("method",i.type),i.formData&&e.each(i.formData,function(t,i){e('<input type="hidden"/>').prop("name",i.name).val(i.value).appendTo(n)}),i.fileInput&&i.fileInput.length&&"POST"===i.type&&(t=i.fileInput.clone(),
// Insert a clone for each file input field:
i.fileInput.after(function(e){return t[e]}),i.paramName&&i.fileInput.each(function(t){e(this).prop("name",s[t]||i.paramName)}),
// Appending the file input fields to the hidden form
// removes them from their original location:
n.append(i.fileInput).prop("enctype","multipart/form-data").prop("encoding","multipart/form-data"),
// Remove the HTML5 form attribute from the input(s):
i.fileInput.removeAttr("form")),n.submit(),
// Insert the file input fields at their original location
// by replacing the clones with the originals:
t&&t.length&&i.fileInput.each(function(i,n){var r=e(t[i]);
// Restore the original name and form properties:
e(n).prop("name",r.prop("name")).attr("form",r.attr("form")),r.replaceWith(n)})}),n.append(r).appendTo(document.body)},abort:function(){r&&
// javascript:false as iframe src aborts the request
// and prevents warning popups on HTTPS in IE6.
// concat is used to avoid the "Script URL" JSLint error:
r.unbind("load").prop("src",a),n&&n.remove()}}}}),
// The iframe transport returns the iframe content document as response.
// The following adds converters from iframe to text, json, html, xml
// and script.
// Please note that the Content-Type for JSON responses has to be text/plain
// or text/html, if the browser doesn't include application/json in the
// Accept header, else IE will show a download dialog.
// The Content-Type for XML responses on the other hand has to be always
// application/xml or text/xml, so IE properly parses the XML response.
// See also
// https://github.com/blueimp/jQuery-File-Upload/wiki/Setup#content-type-negotiation
e.ajaxSetup({converters:{"iframe text":function(t){return t&&e(t[0].body).text()},"iframe json":function(t){return t&&e.parseJSON(e(t[0].body).text())},"iframe html":function(t){return t&&e(t[0].body).html()},"iframe xml":function(t){var i=t&&t[0];return i&&e.isXMLDoc(i)?i:e.parseXML(i.XMLDocument&&i.XMLDocument.xml||e(i.body).html())},"iframe script":function(t){return t&&e.globalEval(e(t[0].body).text())}}})}),/*
 * jQuery UI Widget 1.10.3+amd
 * https://github.com/blueimp/jQuery-File-Upload
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/jQuery.widget/
 */
function(e){e(jQuery)}(function(e,t){var i=0,n=Array.prototype.slice,r=e.cleanData;e.cleanData=function(t){for(var i,n=0;null!=(i=t[n]);n++)try{e(i).triggerHandler("remove")}catch(s){}r(t)},e.widget=function(t,i,n){var r,s,a,o,
// proxiedPrototype allows the provided prototype to remain unmodified
// so that it can be used as a mixin for multiple widgets (#8876)
l={},u=t.split(".")[0];t=t.split(".")[1],r=u+"-"+t,n||(n=i,i=e.Widget),
// create selector for plugin
e.expr[":"][r.toLowerCase()]=function(t){return!!e.data(t,r)},e[u]=e[u]||{},s=e[u][t],a=e[u][t]=function(e,t){
// allow instantiation without "new" keyword
// allow instantiation without "new" keyword
// allow instantiation without initializing for simple inheritance
// must use "new" keyword (the code above always passes args)
return this._createWidget?void(arguments.length&&this._createWidget(e,t)):new a(e,t)},
// extend with the existing constructor to carry over any static properties
e.extend(a,s,{version:n.version,
// copy the object used to create the prototype in case we need to
// redefine the widget later
_proto:e.extend({},n),
// track widgets that inherit from this widget in case this widget is
// redefined after a widget inherits from it
_childConstructors:[]}),o=new i,
// we need to make the options hash a property directly on the new instance
// otherwise we'll modify the options hash on the prototype that we're
// inheriting from
o.options=e.widget.extend({},o.options),e.each(n,function(t,n){return e.isFunction(n)?void(l[t]=function(){var e=function(){return i.prototype[t].apply(this,arguments)},r=function(e){return i.prototype[t].apply(this,e)};return function(){var t,i=this._super,s=this._superApply;return this._super=e,this._superApply=r,t=n.apply(this,arguments),this._super=i,this._superApply=s,t}}()):void(l[t]=n)}),a.prototype=e.widget.extend(o,{
// TODO: remove support for widgetEventPrefix
// always use the name + a colon as the prefix, e.g., draggable:start
// don't prefix for widgets that aren't DOM-based
widgetEventPrefix:s?o.widgetEventPrefix:t},l,{constructor:a,namespace:u,widgetName:t,widgetFullName:r}),
// If this widget is being redefined then we need to find all widgets that
// are inheriting from it and redefine all of them so that they inherit from
// the new version of this widget. We're essentially trying to replace one
// level in the prototype chain.
s?(e.each(s._childConstructors,function(t,i){var n=i.prototype;
// redefine the child widget using the same prototype that was
// originally used, but inherit from the new version of the base
e.widget(n.namespace+"."+n.widgetName,a,i._proto)}),
// remove the list of existing child constructors from the old constructor
// so the old child constructors can be garbage collected
delete s._childConstructors):i._childConstructors.push(a),e.widget.bridge(t,a)},e.widget.extend=function(i){for(var r,s,a=n.call(arguments,1),o=0,l=a.length;o<l;o++)for(r in a[o])s=a[o][r],a[o].hasOwnProperty(r)&&s!==t&&(
// Clone objects
e.isPlainObject(s)?i[r]=e.isPlainObject(i[r])?e.widget.extend({},i[r],s):
// Don't extend strings, arrays, etc. with objects
e.widget.extend({},s):i[r]=s);return i},e.widget.bridge=function(i,r){var s=r.prototype.widgetFullName||i;e.fn[i]=function(a){var o="string"==typeof a,l=n.call(arguments,1),u=this;
// allow multiple hashes to be passed on init
return a=!o&&l.length?e.widget.extend.apply(null,[a].concat(l)):a,o?this.each(function(){var n,r=e.data(this,s);return r?e.isFunction(r[a])&&"_"!==a.charAt(0)?(n=r[a].apply(r,l),n!==r&&n!==t?(u=n&&n.jquery?u.pushStack(n.get()):n,!1):void 0):e.error("no such method '"+a+"' for "+i+" widget instance"):e.error("cannot call methods on "+i+" prior to initialization; attempted to call method '"+a+"'")}):this.each(function(){var t=e.data(this,s);t?t.option(a||{})._init():e.data(this,s,new r(a,this))}),u}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,
// callbacks
create:null},_createWidget:function(t,n){n=e(n||this.defaultElement||this)[0],this.element=e(n),this.uuid=i++,this.eventNamespace="."+this.widgetName+this.uuid,this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this.bindings=e(),this.hoverable=e(),this.focusable=e(),n!==this&&(e.data(n,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===n&&this.destroy()}}),this.document=e(n.style?
// element within the document
n.ownerDocument:
// element is window or document
n.document||n),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){this._destroy(),
// we can probably remove the unbind calls in 2.0
// all event bindings should go through this._on()
this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled ui-state-disabled"),
// clean up events and states
this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:e.noop,widget:function(){return this.element},option:function(i,n){var r,s,a,o=i;if(0===arguments.length)
// don't return a reference to the internal hash
return e.widget.extend({},this.options);if("string"==typeof i)if(
// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
o={},r=i.split("."),i=r.shift(),r.length){for(s=o[i]=e.widget.extend({},this.options[i]),a=0;a<r.length-1;a++)s[r[a]]=s[r[a]]||{},s=s[r[a]];if(i=r.pop(),n===t)return s[i]===t?null:s[i];s[i]=n}else{if(n===t)return this.options[i]===t?null:this.options[i];o[i]=n}return this._setOptions(o),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,"disabled"===e&&(this.widget().toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!t).attr("aria-disabled",t),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_on:function(t,i,n){var r,s=this;
// no suppressDisabledCheck flag, shuffle arguments
"boolean"!=typeof t&&(n=i,i=t,t=!1),
// no element argument, shuffle and use this.element
n?(
// accept selectors, DOM elements
i=r=e(i),this.bindings=this.bindings.add(i)):(n=i,i=this.element,r=this.widget()),e.each(n,function(n,a){function o(){
// allow widgets to customize the disabled handling
// - disabled as an array instead of boolean
// - disabled class as method for disabling individual parts
if(t||s.options.disabled!==!0&&!e(this).hasClass("ui-state-disabled"))return("string"==typeof a?s[a]:a).apply(s,arguments)}
// copy the guid so direct unbinding works
"string"!=typeof a&&(o.guid=a.guid=a.guid||o.guid||e.guid++);var l=n.match(/^(\w+)\s*(.*)$/),u=l[1]+s.eventNamespace,c=l[2];c?r.delegate(c,u,o):i.bind(u,o)})},_off:function(e,t){t=(t||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.unbind(t).undelegate(t)},_delay:function(e,t){function i(){return("string"==typeof e?n[e]:e).apply(n,arguments)}var n=this;return setTimeout(i,t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){e(t.currentTarget).addClass("ui-state-hover")},mouseleave:function(t){e(t.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){e(t.currentTarget).addClass("ui-state-focus")},focusout:function(t){e(t.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(t,i,n){var r,s,a=this.options[t];if(n=n||{},i=e.Event(i),i.type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),
// the original event may come from any element
// so we need to reset the target on the new event
i.target=this.element[0],
// copy original event properties over to the new event
s=i.originalEvent)for(r in s)r in i||(i[r]=s[r]);return this.element.trigger(i,n),!(e.isFunction(a)&&a.apply(this.element[0],[i].concat(n))===!1||i.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,i){e.Widget.prototype["_"+t]=function(n,r,s){"string"==typeof r&&(r={effect:r});var a,o=r?r===!0||"number"==typeof r?i:r.effect||i:t;r=r||{},"number"==typeof r&&(r={duration:r}),a=!e.isEmptyObject(r),r.complete=s,r.delay&&n.delay(r.delay),a&&e.effects&&e.effects.effect[o]?n[t](r):o!==t&&n[o]?n[o](r.duration,r.easing,s):n.queue(function(i){e(this)[t](),s&&s.call(n[0]),i()})}})}),!function(e,t){"use strict";var//组件存放目录，为空表示自动获取(不用填写host，相对站点的根目录即可)。
i,n,r="",s={getPath:function(){var e=document.scripts,t=e[e.length-1].src;return r?r:t.substring(0,t.lastIndexOf("/")+1)},
//五种原始层模式
type:["dialog","page","iframe","loading","tips"]};
//默认内置方法。
e.layer={v:"1.8.5",ie6:!!e.ActiveXObject&&!e.XMLHttpRequest,index:0,path:s.getPath(),
//载入模块
use:function(e,t){var n=i("head")[0],e=e.replace(/\s/g,""),r=/\.css$/.test(e),s=document.createElement(r?"link":"script"),a=e.replace(/\.|\//g,"");r&&(s.type="text/css",s.rel="stylesheet"),s[r?"href":"src"]=/^http:\/\//.test(e)?e:layer.path+e,s.id=a,i("#"+a)[0]||n.appendChild(s),t&&(document.all?i(s).ready(t):i(s).load(t))},alert:function(e,t,n,r,s){var a="function"==typeof n,o={dialog:{msg:e,type:t,yes:a?n:r},area:["auto","auto"],close:function(e){
//设置关闭按钮是否执行yes的回调
s&&(a?n():r()),layer.close(e)}};return a||(o.title=n),i.layer(o)},confirm:function(e,t,n,r){var s="function"==typeof n,a={dialog:{msg:e,type:4,btns:2,yes:t,no:s?n:r}};return s||(a.title=n),i.layer(a)},msg:function(e,n,r,s){var a={title:!1,closeBtn:!1,time:n===t?2:n,dialog:{msg:""===e||e===t?"&nbsp;":e},end:s};return"object"==typeof r?(a.dialog.type=r.type,a.shade=r.shade,a.shift=r.rate):"function"==typeof r?a.end=r:a.dialog.type=r,i.layer(a)},
//加载层快捷引用
load:function(e,t){return"string"==typeof e?layer.msg(e,t||0,16):i.layer({time:e,loading:{type:t},bgcolor:t?"#fff":"",shade:t?[.1,"#000"]:[0],border:3!==t&&t?[6,.3,"#000"]:[0],type:3,title:["",!1],closeBtn:[0,!1]})},
//tips层快捷引用
tips:function(e,t,n,r,s,a){var o={type:4,shade:!1,success:function(e){this.closeBtn||e.find(".xubox_tips").css({"padding-right":10})},bgcolor:"",tips:{msg:e,follow:t}};return o.time="object"==typeof n?n.time:0|n,n=n||{},o.closeBtn=n.closeBtn||!1,o.maxWidth=n.maxWidth||r,o.tips.guide=n.guide||s,o.tips.style=n.style||a,o.tips.more=n.more,i.layer(o)}};
//缓存常用字符
var a=["xubox_layer","xubox_iframe",".xubox_title",".xubox_text",".xubox_page",".xubox_main"],o=function(e){var t=this,n=t.config;layer.index++,t.index=layer.index,t.config=i.extend({},n,e),t.config.dialog=i.extend({},n.dialog,e.dialog),t.config.page=i.extend({},n.page,e.page),t.config.iframe=i.extend({},n.iframe,e.iframe),t.config.loading=i.extend({},n.loading,e.loading),t.config.tips=i.extend({},n.tips,e.tips),t.creat()};o.pt=o.prototype,
//默认配置
o.pt.config={type:0,shade:[.1,"#fff"],//lyc修改，原始值为0.7
fix:!0,move:".xubox_title",title:"&#x4FE1;&#x606F;",offset:["","50%"],area:["auto","auto"],closeBtn:[0,!0],time:0,bgcolor:"#fff",border:[6,.3,"#000"],zIndex:19891014,maxWidth:400,dialog:{btns:1,btn:["&#x786E;&#x5B9A;","&#x53D6;&#x6D88;"],type:8,msg:"",yes:function(e){layer.close(e)},no:function(e){layer.close(e)}},page:{dom:"#xulayer",html:"",url:""},iframe:{src:"http://sentsin.com",scrolling:"auto"},loading:{type:0},tips:{msg:"",follow:"",guide:0,isGuide:!0,style:["background-color:#FF9900; color:#fff;","#FF9900"]},success:function(e,t){},//创建成功后的回调
close:function(e){layer.close(e)},//右上角关闭回调
end:function(){}},
//容器
o.pt.space=function(e){var t=this,e=e||"",i=t.index,n=t.config,r=n.dialog,s=(r.type===-1,"",['<div class="xubox_dialog">'+r.msg+"</div>",'<div class="xubox_page">'+e+"</div>",'<iframe scrolling="'+n.iframe.scrolling+'" allowtransparency="true" id="'+a[1]+i+'" name="'+a[1]+i+'" onload="this.className=\''+a[1]+'\'" class="'+a[1]+'" frameborder="0" src="'+n.iframe.src+'"></iframe>','<span class="xubox_loading xubox_loading_'+n.loading.type+'"></span>','<div class="xubox_tips" style="'+n.tips.style[0]+'"><div class="xubox_tipsMsg">'+n.tips.msg+'</div><i class="layerTipsG"></i></div>']),o="",l="",u=n.zIndex+i,c="z-index:"+u+"; background-color:"+n.shade[1]+"; opacity:"+n.shade[0]+"; filter:alpha(opacity="+100*n.shade[0]+");";n.shade[0]&&(o='<div times="'+i+'" id="xubox_shade'+i+'" class="xubox_shade" style="'+c+'"></div>'),n.zIndex=u;var d="",h="";"z-index:"+(u-1)+";  background-color: "+n.border[2]+"; opacity:"+n.border[1]+"; filter:alpha(opacity="+100*n.border[1]+"); top:-"+n.border[0]+"px; left:-"+n.border[0]+"px;";n.border[0]&&(l=""),!n.maxmin||1!==n.type&&2!==n.type||/^\d+%$/.test(n.area[0])&&/^\d+%$/.test(n.area[1])||(h='<a class="xubox_min" href="javascript:;"><cite></cite></a><a class="xubox_max xulayer_png32" href="javascript:;"></a>'),n.closeBtn[1]&&(h+='<a class="xubox_close xulayer_png32 xubox_close'+n.closeBtn[0]+'" href="javascript:;" style="'+(4===n.type?"position:absolute; right:-3px; _right:7px; top:-4px;":"")+'"><span class="closeTip">关闭<em></em></span></a>');var f="object"==typeof n.title;return n.title&&(d='<div class="xubox_title" style="'+(f?n.title[1]:"")+'"><em>'+(f?n.title[0]:n.title)+"</em></div>"),[o,'<div times="'+i+'" showtime="'+n.time+'" style="z-index:'+u+'" id="'+a[0]+i+'" class="'+a[0]+'"><div style="background-color:'+n.bgcolor+"; z-index:"+u+'" class="xubox_main">'+d+s[n.type]+'<span class="xubox_setwin">'+h+'</span><div class="xubox_botton"></div></div>'+l+"</div>"]},
//创建骨架
o.pt.creat=function(){var e=this,t="",n=e.config,r=n.dialog,s=e.index,o=n.page,l=i("body"),u=function(n){var n=n||"";t=e.space(n),l.append(i(t[0]))};switch(n.type){case 0:n.title||(n.area=["auto","auto"]),i(".xubox_dialog")[0]&&layer.close(i(".xubox_dialog").parents("."+a[0]).attr("times"));break;case 1:if(""!==o.html)u('<div class="xuboxPageHtml">'+o.html+"</div>"),l.append(i(t[1]));else if(""!==o.url)u('<div class="xuboxPageHtml" id="xuboxPageHtml'+s+'">'+o.html+"</div>"),l.append(i(t[1])),i.get(o.url,function(e){i("#xuboxPageHtml"+s).html(e.toString()),o.ok&&o.ok(e)});else{if(0!=i(o.dom).parents(a[4]).length)return;u(),i(o.dom).show().wrap(i(t[1]))}break;case 3:n.title=!1,n.area=["auto","auto"],n.closeBtn=["",!1],i(".xubox_loading")[0]&&layer.closeLoad();break;case 4:n.title=!1,n.area=["auto","auto"],n.fix=!1,n.border=[0],n.tips.more||layer.closeTips()}1!==n.type&&(u(),l.append(i(t[1])));var c=e.layerE=i("#"+a[0]+s);
//配置按钮
if(c.css({width:n.area[0],height:n.area[1]}),n.fix||c.css({position:"absolute"}),n.title&&(3!==n.type||4!==n.type)){var d=0===n.type?r:n,h=c.find(".xubox_botton");switch(d.btn=n.btn||r.btn,d.btns){case 0:h.html("").hide();break;case 1:h.html('<a href="javascript:;" class="xubox_yes xubox_botton1">'+d.btn[0]+"</a>");break;case 2:h.html('<a href="javascript:;" class="xubox_yes xubox_botton2">'+d.btn[0]+'</a><a href="javascript:;" class="xubox_no xubox_botton3">'+d.btn[1]+"</a>")}}"auto"===c.css("left")?(c.hide(),setTimeout(function(){c.show(),e.set(s)},500)):e.set(s),n.time<=0||e.autoclose(),/*自定义   start*/
//隐藏标题
n.hideTitle&&(c.find(".xubox_title").hide(),c.find(".xubox_dialog ").css({paddingTop:0})),
//隐藏按钮
n.hideBtn&&c.find(".xubox_botton").hide(),/*自定义   end*/
e.callback()},s.fade=function(e,t,i){e.css({opacity:0}).animate({opacity:i},t)},
//计算坐标
o.pt.offset=function(){var e=this,t=e.config,i=e.layerE,r=i.outerHeight();""===t.offset[0]&&r<n.height()?e.offsetTop=(n.height()-r-2*t.border[0])/2:t.offset[0].indexOf("px")!=-1?e.offsetTop=parseFloat(t.offset[0]):e.offsetTop=parseFloat(t.offset[0]||0)/100*n.height(),e.offsetTop=e.offsetTop+t.border[0]+(t.fix?0:n.scrollTop()),t.offset[1].indexOf("px")!=-1?e.offsetLeft=parseFloat(t.offset[1])+t.border[0]:(t.offset[1]=""===t.offset[1]?"50%":t.offset[1],"50%"===t.offset[1]?e.offsetLeft=t.offset[1]:e.offsetLeft=parseFloat(t.offset[1])/100*n.width()+t.border[0])},
//初始化骨架
o.pt.set=function(e){var t=this,r=t.config,o=(r.dialog,r.page),l=(r.loading,t.layerE),u=l.find(a[2]);switch(t.autoArea(e),r.title?0===r.type&&layer.ie6&&u.css({width:l.outerWidth()}):4!==r.type&&l.find(".xubox_close").addClass("xubox_close1"),l.attr({type:s.type[r.type]}),t.offset(),
//判断是否动画弹出
4!==r.type&&(r.shift&&!layer.ie6?"object"==typeof r.shift?t.shift(r.shift[0],r.shift[1]||500,r.shift[2]):t.shift(r.shift,500):l.css({top:t.offsetTop,left:t.offsetLeft})),r.type){case 0:l.find(a[5]).css({"background-color":"#fff"}),r.title?l.find(a[3]).css({paddingTop:18+u.outerHeight()}):(l.find(".xubox_msgico").css({top:8}),l.find(a[3]).css({marginTop:11}));break;case 1:l.find(o.dom).addClass("layer_pageContent"),r.shade[0]&&l.css({zIndex:r.zIndex+1}),r.title&&l.find(a[4]).css({top:u.outerHeight()});break;case 2:var c=l.find("."+a[1]),d=l.height();c.addClass("xubox_load").css({width:l.width()}),r.title?c.css({top:u.height(),height:d-u.height()}):c.css({top:0,height:d}),layer.ie6&&c.attr("src",r.iframe.src);break;case 4:var h=[0,l.outerHeight()],f=i(r.tips.follow),p={width:f.outerWidth(),height:f.outerHeight(),top:f.offset().top,left:f.offset().left},m=l.find(".layerTipsG");r.tips.isGuide||m.remove(),l.outerWidth()>r.maxWidth&&l.width(r.maxWidth),p.tipColor=r.tips.style[1],h[0]=l.outerWidth(),p.autoLeft=function(){p.left+h[0]-n.width()>0?(p.tipLeft=p.left+p.width-h[0],m.css({right:12,left:"auto"})):p.tipLeft=p.left},
//辨别tips的方位
p.where=[function(){//上
p.autoLeft(),p.tipTop=p.top-h[1]-10,m.removeClass("layerTipsB").addClass("layerTipsT").css({"border-right-color":p.tipColor})},function(){//右
p.tipLeft=p.left+p.width+10,p.tipTop=p.top,m.removeClass("layerTipsL").addClass("layerTipsR").css({"border-bottom-color":p.tipColor})},function(){//下
p.autoLeft(),p.tipTop=p.top+p.height+10,m.removeClass("layerTipsT").addClass("layerTipsB").css({"border-right-color":p.tipColor})},function(){//左
p.tipLeft=p.left-h[0]+10,p.tipTop=p.top,m.removeClass("layerTipsR").addClass("layerTipsL").css({"border-bottom-color":p.tipColor})}],p.where[r.tips.guide](),/* 8*2为小三角形占据的空间 */
0===r.tips.guide?p.top-(n.scrollTop()+h[1]+16)<0&&p.where[2]():1===r.tips.guide?n.width()-(p.left+p.width+h[0]+16)>0||p.where[3]():2===r.tips.guide?p.top-n.scrollTop()+p.height+h[1]+16-n.height()>0&&p.where[0]():3===r.tips.guide?h[0]+16-p.left>0&&p.where[1]():4===r.tips.guide,l.css({left:p.tipLeft,top:p.tipTop})}r.fadeIn&&(s.fade(l,r.fadeIn,1),s.fade(i("#xubox_shade"+e),r.fadeIn,r.shade[0])),
//坐标自适应浏览器窗口尺寸
r.fix&&""===r.offset[0]&&!r.shift&&n.on("resize",function(){l.css({top:(n.height()-l.outerHeight())/2})}),t.move()},
//动画进入
o.pt.shift=function(e,t,i){var r=this,s=r.config,a=r.layerE,o=0,l=n.width(),u=n.height()+(s.fix?0:n.scrollTop());o="50%"==s.offset[1]||""==s.offset[1]?a.outerWidth()/2:a.outerWidth();var c={t:{top:r.offsetTop},b:{top:u-a.outerHeight()-s.border[0]},cl:o+s.border[0],ct:-a.outerHeight(),cr:l-o-s.border[0]};switch(e){case"left-top":a.css({left:c.cl,top:c.ct}).animate(c.t,t);break;case"top":a.css({top:c.ct}).animate(c.t,t);break;case"right-top":a.css({left:c.cr,top:c.ct}).animate(c.t,t);break;case"right-bottom":a.css({left:c.cr,top:u}).animate(i?c.t:c.b,t);break;case"bottom":a.css({top:u}).animate(i?c.t:c.b,t);break;case"left-bottom":a.css({left:c.cl,top:u}).animate(i?c.t:c.b,t);break;case"left":a.css({left:-a.outerWidth()}).animate({left:r.offsetLeft},t)}},
//自适应宽高
o.pt.autoArea=function(e){var t,n=this,e=e||n.index,r=n.config,s=r.page,o=i("#"+a[0]+e),l=o.find(a[2]),u=o.find(a[5]),c=(r.title?l.innerHeight():0,0);switch("auto"===r.area[0]&&u.outerWidth()>=r.maxWidth,r.type){case 0:var d=o.find(".xubox_botton>a");t=o.find(a[3]).outerHeight()+20,d.length>0&&(c=d.outerHeight()+20);break;case 1:var h=o.find(a[4]);t=i(s.dom).outerHeight(),"auto"===r.area[0]&&o.css({width:h.outerWidth()}),""===s.html&&""===s.url||(t=h.outerHeight());break;case 2:o.find("iframe").css({width:o.outerWidth(),height:o.outerHeight()-(r.title?l.innerHeight():0)});break;case 3:var f=o.find(".xubox_loading");t=f.outerHeight(),u.css({width:f.width()})}"auto"===r.area[1]&&u.css({height:"auto"}),i("#xubox_border"+e).css({width:o.outerWidth()+2*r.border[0],height:o.outerHeight()+2*r.border[0]}),layer.ie6&&"auto"!==r.area[0]&&u.css({width:o.outerWidth()}),"50%"!==r.offset[1]&&""!=r.offset[1]||4===r.type?o.css({marginLeft:0}):o.css({marginLeft:-o.outerWidth()/2})},
//拖拽层
o.pt.move=function(){var e=this,t=e.config,r={setY:0,moveLayer:function(){if(0==parseInt(r.layerE.css("margin-left")))var e=parseInt(r.move.css("left"));else var e=parseInt(r.move.css("left"))+-parseInt(r.layerE.css("margin-left"));"fixed"!==r.layerE.css("position")&&(e-=r.layerE.parent().offset().left,r.setY=0),r.layerE.css({left:e,top:parseInt(r.move.css("top"))-r.setY})}},s=e.layerE.find(t.move);t.move&&s.attr("move","ok"),t.move?s.css({cursor:"move"}):s.css({cursor:"auto"}),i(t.move).on("mousedown",function(e){if(e.preventDefault(),"ok"===i(this).attr("move")){r.ismove=!0,r.layerE=i(this).parents("."+a[0]);var s=r.layerE.offset().left,o=r.layerE.offset().top,l=r.layerE.width()-6,u=r.layerE.height()-6;i("#xubox_moves")[0]||i("body").append('<div id="xubox_moves" class="xubox_moves" style="left:'+s+"px; top:"+o+"px; width:"+l+"px; height:"+u+'px; z-index:2147483584"></div>'),r.move=i("#xubox_moves"),t.moveType&&r.move.css({opacity:0}),r.moveX=e.pageX-r.move.position().left,r.moveY=e.pageY-r.move.position().top,"fixed"!==r.layerE.css("position")||(r.setY=n.scrollTop())}}),i(document).mousemove(function(e){if(r.ismove){var i=e.pageX-r.moveX,s=e.pageY-r.moveY;
//控制元素不被拖出窗口外
if(e.preventDefault(),!t.moveOut){r.setY=n.scrollTop();var a=n.width()-r.move.outerWidth()-t.border[0],o=t.border[0]+r.setY;i<t.border[0]&&(i=t.border[0]),i>a&&(i=a),s<o&&(s=o),s>n.height()-r.move.outerHeight()-t.border[0]+r.setY&&(s=n.height()-r.move.outerHeight()-t.border[0]+r.setY)}r.move.css({left:i,top:s}),t.moveType&&r.moveLayer(),i=null,s=null,a=null,o=null}}).mouseup(function(){try{r.ismove&&(r.moveLayer(),r.move.remove()),r.ismove=!1}catch(e){r.ismove=!1}t.moveEnd&&t.moveEnd()})},
//自动关闭layer
o.pt.autoclose=function(){var e=this,t=e.config.time,i=function(){t--,0===t&&(layer.close(e.index),clearInterval(e.autotime))};e.autotime=setInterval(i,1e3)},s.config={end:{}},o.pt.callback=function(){var e=this,t=e.layerE,n=e.config,r=n.dialog;e.openLayer(),e.config.success(t,e.index),layer.ie6&&e.IE6(t),t.find(".xubox_close").on("click",function(){n.close(e.index),layer.close(e.index)}),t.find(".xubox_yes").on("click",function(){n.yes?n.yes(e.index):r.yes(e.index)}),t.find(".xubox_no").on("click",function(){n.no?n.no(e.index):r.no(e.index),layer.close(e.index)}),e.config.shadeClose&&i("#xubox_shade"+e.index).on("click",function(){layer.close(e.index)}),
//最小化
t.find(".xubox_min").on("click",function(){layer.min(e.index,n),n.min&&n.min(t)}),
//全屏/还原
t.find(".xubox_max").on("click",function(){i(this).hasClass("xubox_maxmin")?(layer.restore(e.index),n.restore&&n.restore(t)):(layer.full(e.index,n),n.full&&n.full(t))}),s.config.end[e.index]=n.end},
//恢复select
s.reselect=function(){i.each(i("select"),function(e,t){var n=i(this);n.parents("."+a[0])[0]||1==n.attr("layer")&&i("."+a[0]).length<1&&n.removeAttr("layer").show(),n=null})},o.pt.IE6=function(e){var t=this,r=e.offset().top;
//ie6的固定与相对定位
if(t.config.fix)var s=function(){e.css({top:n.scrollTop()+r})};else var s=function(){e.css({top:r})};s(),n.scroll(s),
//隐藏select
i.each(i("select"),function(e,t){var n=i(this);n.parents("."+a[0])[0]||"none"==n.css("display")||n.attr({layer:"1"}).hide(),n=null})},
//给layer对象拓展方法
o.pt.openLayer=function(){var e=this;e.layerE;
//自适应宽高
layer.autoArea=function(t){return e.autoArea(t)},
//兼容旧版出场动画
layer.shift=function(t,i,n){e.shift(t,i,n)},
//初始化拖拽元素
layer.setMove=function(){return e.move()},
//置顶当前窗口
layer.zIndex=e.config.zIndex,layer.setTop=function(e){var t=function(){layer.zIndex++,e.css("z-index",layer.zIndex+1)};return layer.zIndex=parseInt(e[0].style.zIndex),e.on("mousedown",t),layer.zIndex}},s.isauto=function(e,t,i){"auto"===t.area[0]&&(t.area[0]=e.outerWidth()),"auto"===t.area[1]&&(t.area[1]=e.outerHeight()),e.attr({area:t.area+","+i}),e.find(".xubox_max").addClass("xubox_maxmin")},s.rescollbar=function(e){a.html.attr("layer-full")==e&&(a.html[0].style.removeProperty?a.html[0].style.removeProperty("overflow"):a.html[0].style.removeAttribute("overflow"),a.html.removeAttr("layer-full"))},/**
     * 集成属性/方法
     **/
//获取page层所在索引
layer.getIndex=function(e){return i(e).parents("."+a[0]).attr("times")},
//获取子iframe的DOM
layer.getChildFrame=function(e,t){return t=t||i("."+a[1]).parents("."+a[0]).attr("times"),i("#"+a[0]+t).find("."+a[1]).contents().find(e)},
//得到当前iframe层的索引，子iframe时使用
layer.getFrameIndex=function(e){return i(e?"#"+e:"."+a[1]).parents("."+a[0]).attr("times")},
//iframe层自适应宽高
layer.iframeAuto=function(e){e=e||i("."+a[1]).parents("."+a[0]).attr("times");var t=layer.getChildFrame("body",e).outerHeight(),n=i("#"+a[0]+e),r=n.find(a[2]),s=0;r&&(s=r.height()),n.css({height:t+s});var o=-parseInt(i("#xubox_border"+e).css("top"));i("#xubox_border"+e).css({height:t+2*o+s}),i("#"+a[1]+e).css({height:t})},
//重置iframe url
layer.iframeSrc=function(e,t){i("#"+a[0]+e).find("iframe").attr("src",t)},
//重置层
layer.area=function(e,t){var n=[i("#"+a[0]+e),i("#xubox_border"+e)],r=n[0].attr("type"),o=n[0].find(a[5]),l=n[0].find(a[2]);if(r===s.type[1]||r===s.type[2]){if(n[0].css(t),o.css({width:t.width,height:t.height}),r===s.type[2]){var u=n[0].find("iframe");u.css({width:t.width,height:l?t.height-l.innerHeight():t.height})}"0px"!==n[0].css("margin-left")&&(t.hasOwnProperty("top")&&n[0].css({top:t.top-(n[1][0]?parseFloat(n[1].css("top")):0)}),t.hasOwnProperty("left")&&n[0].css({left:t.left+n[0].outerWidth()/2-(n[1][0]?parseFloat(n[1].css("left")):0)}),n[0].css({marginLeft:-n[0].outerWidth()/2})),n[1][0]&&n[1].css({width:parseFloat(t.width)-2*parseFloat(n[1].css("left")),height:parseFloat(t.height)-2*parseFloat(n[1].css("top"))})}},
//最小化
layer.min=function(e,t){var n=i("#"+a[0]+e),r=[n.position().top,n.position().left+parseFloat(n.css("margin-left"))];s.isauto(n,t,r),layer.area(e,{width:180,height:35}),n.find(".xubox_min").hide(),"page"===n.attr("type")&&n.find(a[4]).hide(),s.rescollbar(e)},
//还原
layer.restore=function(e){var t=i("#"+a[0]+e),n=t.attr("area").split(",");t.attr("type");layer.area(e,{width:parseFloat(n[0]),height:parseFloat(n[1]),top:parseFloat(n[2]),left:parseFloat(n[3])}),t.find(".xubox_max").removeClass("xubox_maxmin"),t.find(".xubox_min").show(),"page"===t.attr("type")&&t.find(a[4]).show(),s.rescollbar(e)},
//全屏
layer.full=function(e,t){var r,o=i("#"+a[0]+e),l=2*t.border[0]||6,u=[o.position().top,o.position().left+parseFloat(o.css("margin-left"))];s.isauto(o,t,u),a.html.attr("layer-full")||a.html.css("overflow","hidden").attr("layer-full",e),clearTimeout(r),r=setTimeout(function(){layer.area(e,{top:"fixed"===o.css("position")?0:n.scrollTop(),left:"fixed"===o.css("position")?0:n.scrollLeft(),width:n.width()-l,height:n.height()-l})},100)},
//改变title
layer.title=function(e,t){var n=i("#"+a[0]+(t||layer.index)).find(".xubox_title>em");n.html(e)},
//关闭layer总方法
layer.close=function(e){var t=i("#"+a[0]+e),n=t.attr("type"),r=i("#xubox_moves, #xubox_shade"+e);if(t[0]){if(n==s.type[1])if(t.find(".xuboxPageHtml")[0])t[0].innerHTML="",t.remove();else{t.find(".xubox_setwin,.xubox_close,.xubox_botton,.xubox_title,.xubox_border").remove();for(var o=0;o<3;o++)t.find(".layer_pageContent").unwrap().hide()}else t[0].innerHTML="",t.remove();r.remove(),layer.ie6&&s.reselect(),s.rescollbar(e),"function"==typeof s.config.end[e]&&s.config.end[e](),delete s.config.end[e]}},
//关闭loading层
layer.closeLoad=function(){layer.close(i(".xubox_loading").parents("."+a[0]).attr("times"))},
//关闭tips层
layer.closeTips=function(){layer.closeAll("tips")},
//关闭所有层
layer.closeAll=function(e){i.each(i("."+a[0]),function(){var t=i(this),n=e?t.attr("type")===e:1;n&&layer.close(t.attr("times")),n=null})},
//主入口
s.run=function(){i=jQuery,n=i(e),a.html=i("html"),
//layer.use('/static/js/widget/layer/skin/layer.css');
i.layer=function(e){var t=new o(e);return t.index}},s.run()}(window),function(){function e(e){this.form=e.form,this.rules=e.rules,
//出错就中断
this.errorPause=e.errorPause,this.errorPlacement=e.errorPlacement,this.formElements=this.getElements(),this.ready()}var t={require:function(e,t,i){return""!=$.trim(e)},range:function(e,t,i){return e.length>=i[0]&&e.length<=i[1]}};return e.prototype={
//获取参与验证的元素
getElements:function(){return this.form.find("input,textarea,select").filter("[name]")},validElement:function(e){var i=this,n=e.attr("name"),r=i.rules[n],s=!0;return $.each(r,function(r,a){var o=t[r](e.val(),e,a.params);if(!o){var l="for"+n;$("#"+l).remove();
//替换
var u=a.msg.replace(/\{[^{}]\}/g,function(e,t,i){return a.params[e.charAt(1)]}),c=$("<div id="+l+">"+u+"</div>");return i.errorPlacement?i.errorPlacement(c,e):e.after(c),s=!1,!1}var l="for"+n;$("#"+l).remove()}),s},valid:function(){var e=this,t=!0;return e.formElements.each(function(){var i=e.validElement($(this));if(!i&&(t=!1,e.errorPause))return!1}),t},ready:function(){}},e}(),Pager.fn=Pager.prototype={render:function(e){var t=this;this.iD.html(this.init.createHTML(e)),
//当前点击
this.iD.find("[data-num]").click(function(){var e=$(this);e.hasClass("on")||t.one(e.data("num"))}),
//上一页
this.iD.find(".prePage").click(function(){t.prev()}),
//下一页
this.iD.find(".nextPage").click(function(){t.next()}),
//首页
this.iD.find(".firstPage").click(function(){t.first()}),
//末页
this.iD.find(".lastPage").click(function(){t.last()}),
//跳页
this.iD.find(".toPage").click(function(){t.toPage()})},one:function(e){this.num=e,this.render(this.num),this._callback.call(this,this.num,this.pageSize)},next:function(){if(this.num<this.totalNum){var e=++this.num;this.render(e),this._callback.call(this,this.num,this.pageSize)}},prev:function(){if(this.num>1){var e=--this.num;this.render(e),this._callback.call(this,this.num,this.pageSize)}},first:function(){if(this.num>1){var e=this.num=1;this.render(e),this._callback.call(this,this.num,this.pageSize)}},last:function(){if(this.num<this.totalNum){var e=this.num=this.totalNum;this.render(e),this._callback.call(this,this.num,this.pageSize)}},toPage:function(){var e=Number(this.iD.find(".toPageInput").val());if(e>=1&&e<=this.totalNum&&/^[\d\s]+$/.test(e)){var t=this.num=e;this.render(t),this._callback.call(this,this.num,this.pageSize)}else $.layer({title:"提示消息",area:["300px","100px"],btns:0,shade:[!1],dialog:{type:8,msg:'<div class="layer-content mL5">不存在该页</div>'}})}},/*!
 * jQuery Validation Plugin v1.13.1
 *
 * http://jqueryvalidation.org/
 *
 * Copyright (c) 2014 Jรถrn Zaefferer
 * Released under the MIT license
 */
function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery)}(function(e){e.extend(e.fn,{
// http://jqueryvalidation.org/validate/
validate:function(t){
// if nothing is selected, return nothing; can't chain anyway
if(!this.length)return void(t&&t.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing."));
// check if a validator for this form was already created
var i=e.data(this[0],"validator");
// Add novalidate tag if HTML5.
// validate the form on submit
return i?i:(this.attr("novalidate","novalidate"),i=new e.validator(t,this[0]),e.data(this[0],"validator",i),i.settings.onsubmit&&(this.validateDelegate(":submit","click",function(t){i.settings.submitHandler&&(i.submitButton=t.target),
// allow suppressing validation by adding a cancel class to the submit button
e(t.target).hasClass("cancel")&&(i.cancelSubmit=!0),
// allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
void 0!==e(t.target).attr("formnovalidate")&&(i.cancelSubmit=!0)}),this.submit(function(t){function n(){var n,r;
// insert a hidden input as a replacement for the missing submit button
// and clean up afterwards; thanks to no-block-scope, hidden can be referenced
return!i.settings.submitHandler||(i.submitButton&&(n=e("<input type='hidden'/>").attr("name",i.submitButton.name).val(e(i.submitButton).val()).appendTo(i.currentForm)),r=i.settings.submitHandler.call(i,i.currentForm,t),i.submitButton&&n.remove(),void 0!==r&&r)}
// prevent submit for invalid forms or custom submit handlers
// prevent form submit to be able to see console output
// prevent submit for invalid forms or custom submit handlers
return i.settings.debug&&t.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,n()):i.form()?i.pendingRequest?(i.formSubmitted=!0,!1):n():(i.focusInvalid(),!1)})),i)},
// http://jqueryvalidation.org/valid/
valid:function(){var t,i;return e(this[0]).is("form")?(i=this.validate(),t=i.form()):(t=!0,i=e(this[0].form).validate(),this.each(function(){t=i.element(this)&&t})),t},
// attributes: space separated list of attributes to retrieve and remove
removeAttrs:function(t){var i={},n=this;return e.each(t.split(/\s/),function(e,t){i[t]=n.attr(t),n.removeAttr(t)}),i},
// http://jqueryvalidation.org/rules/
rules:function(t,i){var n,r,s,a,o,l,u=this[0];if(t)switch(n=e.data(u.form,"validator").settings,r=n.rules,s=e.validator.staticRules(u),t){case"add":e.extend(s,e.validator.normalizeRule(i)),
// remove messages from rules, but allow them to be set separately
delete s.messages,r[u.name]=s,i.messages&&(n.messages[u.name]=e.extend(n.messages[u.name],i.messages));break;case"remove":return i?(l={},e.each(i.split(/\s/),function(t,i){l[i]=s[i],delete s[i],"required"===i&&e(u).removeAttr("aria-required")}),l):(delete r[u.name],s)}
// make sure required is at front
// make sure remote is at back
return a=e.validator.normalizeRules(e.extend({},e.validator.classRules(u),e.validator.attributeRules(u),e.validator.dataRules(u),e.validator.staticRules(u)),u),a.required&&(o=a.required,delete a.required,a=e.extend({required:o},a),e(u).attr("aria-required","true")),a.remote&&(o=a.remote,delete a.remote,a=e.extend(a,{remote:o})),a}}),
// Custom selectors
e.extend(e.expr[":"],{
// http://jqueryvalidation.org/blank-selector/
blank:function(t){return!e.trim(""+e(t).val())},
// http://jqueryvalidation.org/filled-selector/
filled:function(t){return!!e.trim(""+e(t).val())},
// http://jqueryvalidation.org/unchecked-selector/
unchecked:function(t){return!e(t).prop("checked")}}),
// constructor for validator
e.validator=function(t,i){this.settings=e.extend(!0,{},e.validator.defaults,t),this.currentForm=i,this.init()},
// http://jqueryvalidation.org/jQuery.validator.format/
e.validator.format=function(t,i){return 1===arguments.length?function(){var i=e.makeArray(arguments);return i.unshift(t),e.validator.format.apply(this,i)}:(arguments.length>2&&i.constructor!==Array&&(i=e.makeArray(arguments).slice(1)),i.constructor!==Array&&(i=[i]),e.each(i,function(e,i){t=t.replace(new RegExp("\\{"+e+"\\}","g"),function(){return i})}),t)},e.extend(e.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:e([]),errorLabelContainer:e([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,
// Hide error label and remove error class on focus if enabled
this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(t,i){if((9!==i.which||""!==this.elementValue(t))&&(t.name in this.submitted||t===this.lastElement)){if(e(t).is(":text"))return!1;this.element(t)}},onclick:function(e){
// click on selects, radiobuttons and checkboxes
e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(t,i,n){"radio"===t.type?this.findByName(t.name).addClass(i).removeClass(n):e(t).addClass(i).removeClass(n)},unhighlight:function(t,i,n){"radio"===t.type?this.findByName(t.name).removeClass(i).addClass(n):e(t).removeClass(i).addClass(n)}},
// http://jqueryvalidation.org/jQuery.validator.setDefaults/
setDefaults:function(t){e.extend(e.validator.defaults,t)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date ( ISO ).",number:"Please enter a valid number.",digits:"Please enter only digits.",creditcard:"Please enter a valid credit card number.",equalTo:"Please enter the same value again.",maxlength:e.validator.format("您输入的文字已超过 {0} 个字符！"),minlength:e.validator.format("Please enter at least {0} characters."),rangelength:e.validator.format("Please enter a value between {0} and {1} characters long."),range:e.validator.format("Please enter a value between {0} and {1}."),max:e.validator.format("Please enter a value less than or equal to {0}."),min:e.validator.format("Please enter a value greater than or equal to {0}.")},autoCreateRanges:!1,prototype:{init:function(){function t(t){var i=e.data(this[0].form,"validator"),n="on"+t.type.replace(/^validate/,""),r=i.settings;r[n]&&!this.is(r.ignore)&&r[n].call(i,this[0],t)}this.labelContainer=e(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||e(this.currentForm),this.containers=e(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var i,n=this.groups={};e.each(this.settings.groups,function(t,i){"string"==typeof i&&(i=i.split(/\s/)),e.each(i,function(e,i){n[i]=t})}),i=this.settings.rules,e.each(i,function(t,n){i[t]=e.validator.normalizeRule(n)}),e(this.currentForm).validateDelegate(":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'] ,[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox']","focusin focusout keyup",t).validateDelegate("select, option, [type='radio'], [type='checkbox']","click",t),this.settings.invalidHandler&&e(this.currentForm).bind("invalid-form.validate",this.settings.invalidHandler),
// Add aria-required to any Static/Data/Class required fields before first validation
// Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
e(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},
// http://jqueryvalidation.org/Validator.form/
form:function(){return this.checkForm(),e.extend(this.submitted,this.errorMap),this.invalid=e.extend({},this.errorMap),this.valid()||e(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},
// http://jqueryvalidation.org/Validator.element/
element:function(t){var i=this.clean(t),n=this.validationTargetFor(i),r=!0;
// Add aria-invalid status for screen readers
// Hide error containers on last error
return this.lastElement=n,void 0===n?delete this.invalid[i.name]:(this.prepareElement(n),this.currentElements=e(n),r=this.check(n)!==!1,r?delete this.invalid[n.name]:this.invalid[n.name]=!0),e(t).attr("aria-invalid",!r),this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),r},
// http://jqueryvalidation.org/Validator.showErrors/
showErrors:function(t){if(t){
// add items to error list and map
e.extend(this.errorMap,t),this.errorList=[];for(var i in t)this.errorList.push({message:t[i],element:this.findByName(i)[0]});
// remove items from success list
this.successList=e.grep(this.successList,function(e){return!(e.name in t)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},
// http://jqueryvalidation.org/Validator.resetForm/
resetForm:function(){e.fn.resetForm&&e(this.currentForm).resetForm(),this.submitted={},this.lastElement=null,this.prepareForm(),this.hideErrors(),this.elements().removeClass(this.settings.errorClass).removeData("previousValue").removeAttr("aria-invalid")},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){/* jshint unused: false */
var t,i=0;for(t in e)i++;return i},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{e(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(t){}},findLastActive:function(){var t=this.lastActive;return t&&1===e.grep(this.errorList,function(e){return e.element.name===t.name}).length&&t},elements:function(){var t=this,i={};
// select all valid inputs inside the form (no submit or reset buttons)
/*

                    //原始版本
                    return $(this.currentForm)
                        .find("input, select, textarea")
                        .not(":submit, :reset, :image, [disabled], [readonly]")
                        .not(this.settings.ignore)
                        .filter(function () {
                            if (!this.name && validator.settings.debug && window.console) {
                                console.error("%o has no name assigned", this);
                            }


                            // select only the first element for each name, and only those with rules specified
                            if (this.name in rulesCache || !validator.objectLength($(this).rules())) {
                                return false;
                            }

                            rulesCache[this.name] = true;
                            return true;
                        });*/
//改进版本  author chengRan   ,如有bug 希望继续改进
return e(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled], [readonly]").add(e(this.currentForm).find("input, select, textarea").filter("[disabled],[readonly]").filter(this.settings.joinValid)).not(this.settings.ignore).filter(function(){
// select only the first element for each name, and only those with rules specified
// select only the first element for each name, and only those with rules specified
return!this.name&&t.settings.debug&&window.console&&console.error("%o has no name assigned",this),!(this.name in i||!t.objectLength(e(this).rules()))&&(i[this.name]=!0,!0)})},clean:function(t){return e(t)[0]},errors:function(){var t=this.settings.errorClass.split(" ").join(".");return e(this.settings.errorElement+"."+t,this.errorContext)},reset:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=e([]),this.toHide=e([]),this.currentElements=e([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(t){var i,n=e(t),r=t.type;return"radio"===r||"checkbox"===r?e("input[name='"+t.name+"']:checked").val():"number"===r&&"undefined"!=typeof t.validity?!t.validity.badInput&&n.val():(i=n.val(),"string"==typeof i?i.replace(/\r/g,""):i)},check:function(t){t=this.validationTargetFor(this.clean(t));var i,n,r,s=e(t).rules(),a=e.map(s,function(e,t){return t}).length,o=!1,l=this.elementValue(t);for(n in s){r={method:n,parameters:s[n]};try{
// if a method indicates that the field is optional and therefore valid,
// don't mark it as valid when there are no other rules
if(
//if ($.validator.methods[method])
i=e.validator.methods[n].call(this,l,t,r.parameters),"dependency-mismatch"===i&&1===a){o=!0;continue}if(o=!1,"pending"===i)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!i)return this.formatAndAdd(t,r),!1}catch(u){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+r.method+"' method.",u),u}}if(!o)return this.objectLength(s)&&this.successList.push(t),!0},
// return the custom message for the given element and validation method
// specified in the element's HTML5 data attribute
// return the generic message if present and no method specific message is present
customDataMessage:function(t,i){return e(t).data("msg"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase())||e(t).data("msg")},
// return the custom message for the given element name and validation method
customMessage:function(e,t){var i=this.settings.messages[e];return i&&(i.constructor===String?i:i[t])},
// return the first defined argument, allowing empty strings
findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(t,i){
// title is never undefined, so handle empty string as undefined
return this.findDefined(this.customMessage(t.name,i),this.customDataMessage(t,i),!this.settings.ignoreTitle&&t.title||void 0,e.validator.messages[i],"<strong>Warning: No message defined for "+t.name+"</strong>")},formatAndAdd:function(t,i){var n=this.defaultMessage(t,i.method),r=/\$?\{(\d+)\}/g;"function"==typeof n?n=n.call(this,i.parameters,t):r.test(n)&&(n=e.validator.format(n.replace(r,"{$1}"),i.parameters)),this.errorList.push({message:n,element:t,method:i.method}),this.errorMap[t.name]=n,this.submitted[t.name]=n},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){var e,t,i;for(e=0;this.errorList[e];e++)i=this.errorList[e],this.settings.highlight&&this.settings.highlight.call(this,i.element,this.settings.errorClass,this.settings.validClass),this.showLabel(i.element,i.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(e=0;this.successList[e];e++)this.showLabel(this.successList[e]);if(this.settings.unhighlight)for(e=0,t=this.validElements();t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return e(this.errorList).map(function(){return this.element})},showLabel:function(t,i){var n,r,s,a=this.errorsFor(t),o=this.idOrName(t),l=e(t).attr("aria-describedby");a.length?(
// refresh error/success class
a.removeClass(this.settings.validClass).addClass(this.settings.errorClass),
// replace message on existing label
a.html(i)):(
// create error element
a=e("<"+this.settings.errorElement+">").attr("id",o+"-error").addClass(this.settings.errorClass).html(i||""),
// Maintain reference to the element to be placed into the DOM
n=a,this.settings.wrapper&&(
// make sure the element is visible, even in IE
// actually showing the wrapped element is handled elsewhere
n=a.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(n):this.settings.errorPlacement?this.settings.errorPlacement(n,e(t)):n.insertAfter(t),
// Link error back to the element
a.is("label")?
// If the error is a label, then associate using 'for'
a.attr("for",o):0===a.parents("label[for='"+o+"']").length&&(
// If the element is not a child of an associated label, then it's necessary
// to explicitly apply aria-describedby
s=a.attr("id").replace(/(:|\.|\[|\])/g,"\\$1"),
// Respect existing non-error aria-describedby
l?l.match(new RegExp("\\b"+s+"\\b"))||(
// Add to end of list if not already present
l+=" "+s):l=s,e(t).attr("aria-describedby",l),
// If this element is grouped, then assign to all elements in the same group
r=this.groups[t.name],r&&e.each(this.groups,function(t,i){i===r&&e("[name='"+t+"']",this.currentForm).attr("aria-describedby",a.attr("id"))}))),!i&&this.settings.success&&(a.text(""),/*ไธดๆถไฟฎๆน๏ผไธป่ฆ้ๅฏน้กต้ขไธญๆ�ก้ชๆทปๅ�successๅ้่ฏฏๆ�่ฎฐ๏ผไธๆถๅคฑ็้ฎ้ขs*/
a.remove(),"string"==typeof this.settings.success?a.addClass(this.settings.success):this.settings.success(a,t)),this.toShow=this.toShow.add(a)},errorsFor:function(t){var i=this.idOrName(t),n=e(t).attr("aria-describedby"),r="label[for='"+i+"'], label[for='"+i+"'] *";
// aria-describedby should directly reference the error element
return n&&(r=r+", #"+n.replace(/\s+/g,", #")),this.errors().filter(r)},idOrName:function(e){return this.groups[e.name]||(this.checkable(e)?e.name:e.id||e.name)},validationTargetFor:function(t){
// Always apply ignore filter
// If radio/checkbox, validate first element in group instead
return this.checkable(t)&&(t=this.findByName(t.name)),e(t).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(t){return e(this.currentForm).find("[name='"+t+"']")},getLength:function(t,i){switch(i.nodeName.toLowerCase()){case"select":return e("option:selected",i).length;case"input":if(this.checkable(i))return this.findByName(i.name).filter(":checked").length}return t.length},depend:function(e,t){return!this.dependTypes[typeof e]||this.dependTypes[typeof e](e,t)},dependTypes:{"boolean":function(e){return e},string:function(t,i){return!!e(t,i.form).length},"function":function(e,t){return e(t)}},optional:function(t){var i=this.elementValue(t);return!e.validator.methods.required.call(this,i,t)&&"dependency-mismatch"},startRequest:function(e){this.pending[e.name]||(this.pendingRequest++,this.pending[e.name]=!0)},stopRequest:function(t,i){this.pendingRequest--,
// sometimes synchronization fails, make sure pendingRequest is never < 0
this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[t.name],i&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(e(this.currentForm).submit(),this.formSubmitted=!1):!i&&0===this.pendingRequest&&this.formSubmitted&&(e(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(t){return e.data(t,"previousValue")||e.data(t,"previousValue",{old:null,valid:!0,message:this.defaultMessage(t,"remote")})}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(t,i){t.constructor===String?this.classRuleSettings[t]=i:e.extend(this.classRuleSettings,t)},classRules:function(t){var i={},n=e(t).attr("class");return n&&e.each(n.split(" "),function(){this in e.validator.classRuleSettings&&e.extend(i,e.validator.classRuleSettings[this])}),i},attributeRules:function(t){var i,n,r={},s=e(t),a=t.getAttribute("type");for(i in e.validator.methods)
// support for <input required> in both html5 and older browsers
"required"===i?(n=t.getAttribute(i),
// Some browsers return an empty string for the required attribute
// and non-HTML5 browsers might have required="" markup
""===n&&(n=!0),
// force non-HTML5 browsers to return bool
n=!!n):n=s.attr(i),
// convert the value to a number for number inputs, and for text for backwards compability
// allows type="date" and others to be compared as strings
/min|max/.test(i)&&(null===a||/number|range|text/.test(a))&&(n=Number(n)),n||0===n?r[i]=n:a===i&&"range"!==a&&(
// exception: the jquery validate 'range' method
// does not test for the html5 'range' type
r[i]=!0);
// maxlength may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
return r.maxlength&&/-1|2147483647|524288/.test(r.maxlength)&&delete r.maxlength,r},dataRules:function(t){var i,n,r={},s=e(t);for(i in e.validator.methods)n=s.data("rule"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase()),void 0!==n&&(r[i]=n);return r},staticRules:function(t){var i={},n=e.data(t.form,"validator");return n.settings.rules&&(i=e.validator.normalizeRule(n.settings.rules[t.name])||{}),i},normalizeRules:function(t,i){
// handle dependency check
// evaluate parameters
// clean number parameters
// auto-create ranges
return e.each(t,function(n,r){
// ignore rule when param is explicitly false, eg. required:false
if(r===!1)return void delete t[n];if(r.param||r.depends){var s=!0;switch(typeof r.depends){case"string":s=!!e(r.depends,i.form).length;break;case"function":s=r.depends.call(i,i)}s?t[n]=void 0===r.param||r.param:delete t[n]}}),e.each(t,function(n,r){t[n]=e.isFunction(r)?r(i):r}),e.each(["minlength","maxlength"],function(){t[this]&&(t[this]=Number(t[this]))}),e.each(["rangelength","range"],function(){var i;t[this]&&(e.isArray(t[this])?t[this]=[Number(t[this][0]),Number(t[this][1])]:"string"==typeof t[this]&&(i=t[this].replace(/[\[\]]/g,"").split(/[\s,]+/),t[this]=[Number(i[0]),Number(i[1])]))}),e.validator.autoCreateRanges&&(null!=t.min&&null!=t.max&&(t.range=[t.min,t.max],delete t.min,delete t.max),null!=t.minlength&&null!=t.maxlength&&(t.rangelength=[t.minlength,t.maxlength],delete t.minlength,delete t.maxlength)),t},
// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
normalizeRule:function(t){if("string"==typeof t){var i={};e.each(t.split(/\s/),function(){i[this]=!0}),t=i}return t},
// http://jqueryvalidation.org/jQuery.validator.addMethod/
addMethod:function(t,i,n){e.validator.methods[t]=i,e.validator.messages[t]=void 0!==n?n:e.validator.messages[t],i.length<3&&e.validator.addClassRules(t,e.validator.normalizeRule(t))},methods:{
// http://jqueryvalidation.org/required-method/
required:function(t,i,n){
// check if dependency is met
if(!this.depend(n,i))return"dependency-mismatch";if("select"===i.nodeName.toLowerCase()){
// could be an array for select-multiple or a string, both are fine this way
var r=e(i).val();return r&&r.length>0}return this.checkable(i)?this.getLength(t,i)>0:e.trim(t).length>0},
// http://jqueryvalidation.org/email-method/
email:function(e,t){
// From http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#e-mail-state-%28type=email%29
// Retrieved 2014-01-14
// If you have a problem with this implementation, report a bug against the above spec
// Or use custom methods to implement your own email validation
return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},
// http://jqueryvalidation.org/url-method/
url:function(e,t){
// contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
return this.optional(t)||/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(e)},
// http://jqueryvalidation.org/date-method/
date:function(e,t){
// ๆญฃๅๅน้ๅผๅฎนie7
return this.optional(t)||!/Invalid|NaN/.test(new Date(e).toString())||/^((\d{2}(([02468][048])|([13579][26]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9])))))|(\d{2}(([02468][1235679])|([13579][01345789]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s(((0?[0-9])|([1-2][0-3]))\:([0-5]?[0-9])((\s)|(\:([0-5]?[0-9])))))?$/.test(e)},
// http://jqueryvalidation.org/dateISO-method/
dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},
// http://jqueryvalidation.org/number-method/
number:function(e,t){return this.optional(t)||/^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},
// http://jqueryvalidation.org/digits-method/
digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},
// http://jqueryvalidation.org/creditcard-method/
// based on http://en.wikipedia.org/wiki/Luhn/
creditcard:function(e,t){if(this.optional(t))return"dependency-mismatch";
// accept only spaces, digits and dashes
if(/[^0-9 \-]+/.test(e))return!1;var i,n,r=0,s=0,a=!1;
// Basing min and max length on
// http://developer.ean.com/general_info/Valid_Credit_Card_Types
if(e=e.replace(/\D/g,""),e.length<13||e.length>19)return!1;for(i=e.length-1;i>=0;i--)n=e.charAt(i),s=parseInt(n,10),a&&(s*=2)>9&&(s-=9),r+=s,a=!a;return r%10===0},
// http://jqueryvalidation.org/minlength-method/
minlength:function(t,i,n){var r=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||r>=n},
// http://jqueryvalidation.org/maxlength-method/
maxlength:function(t,i,n){var r=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||r<=n},
// http://jqueryvalidation.org/rangelength-method/
rangelength:function(t,i,n){var r=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||r>=n[0]&&r<=n[1]},
// http://jqueryvalidation.org/min-method/
min:function(e,t,i){return this.optional(t)||e>=i},
// http://jqueryvalidation.org/max-method/
max:function(e,t,i){return this.optional(t)||e<=i},
// http://jqueryvalidation.org/range-method/
range:function(e,t,i){return this.optional(t)||e>=i[0]&&e<=i[1]},
// http://jqueryvalidation.org/equalTo-method/
equalTo:function(t,i,n){
// bind to the blur event of the target in order to revalidate whenever the target field is updated
// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
var r=e(n);return this.settings.onfocusout&&r.unbind(".validate-equalTo").bind("blur.validate-equalTo",function(){e(i).valid()}),t===r.val()},
// http://jqueryvalidation.org/remote-method/
remote:function(t,i,n){if(this.optional(i))return"dependency-mismatch";var r,s,a=this.previousValue(i);return this.settings.messages[i.name]||(this.settings.messages[i.name]={}),a.originalMessage=this.settings.messages[i.name].remote,this.settings.messages[i.name].remote=a.message,n="string"==typeof n&&{url:n}||n,a.old===t?a.valid:(a.old=t,r=this,this.startRequest(i),s={},s[i.name]=t,e.ajax(e.extend(!0,{url:n,mode:"abort",port:"validate"+i.name,dataType:"json",data:s,context:r.currentForm,success:function(n){var s,o,l,u=n===!0||"true"===n;r.settings.messages[i.name].remote=a.originalMessage,u?(l=r.formSubmitted,r.prepareElement(i),r.formSubmitted=l,r.successList.push(i),delete r.invalid[i.name],r.showErrors()):(s={},o=n||r.defaultMessage(i,"remote"),s[i.name]=a.message=e.isFunction(o)?o(t):o,r.invalid[i.name]=!0,r.showErrors(s)),a.valid=u,r.stopRequest(i,u)}},n)),"pending")}}}),e.format=function(){throw"$.format has been deprecated. Please use $.validator.format instead."};
// ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()
var t,i={};
// Use a prefilter if available (1.5+)
e.ajaxPrefilter?e.ajaxPrefilter(function(e,t,n){var r=e.port;"abort"===e.mode&&(i[r]&&i[r].abort(),i[r]=n)}):(
// Proxy ajax
t=e.ajax,e.ajax=function(n){var r=("mode"in n?n:e.ajaxSettings).mode,s=("port"in n?n:e.ajaxSettings).port;return"abort"===r?(i[s]&&i[s].abort(),i[s]=t.apply(this,arguments),i[s]):t.apply(this,arguments)}),
// provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation
// handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target
e.extend(e.fn,{validateDelegate:function(t,i,n){return this.bind(i,function(i){var r=e(i.target);if(r.is(t))return n.apply(r,arguments)})}})});var Validator=function(){$.extend($.validator.messages,{required:"* 此项为必填项～",minlength:$.validator.format("* 最少输入 {0} 个字符～")});var e={required:{paras:!0,messages:function(){return"* 此项为必填项～"}},isIntGt0:{paras:!0,messages:function(){return"* 请输入大于0的整数～"},reg:function(e,t){return e=$.trim(e),this.optional(t)||/^\d+$/.test(e)&&e>0}},isIntGt500:{paras:!0,messages:function(){return"* 请输入不小于500的整数～"},reg:function(e,t){return e=$.trim(e),this.optional(t)||/^\d+$/.test(e)&&e>=500&&e<=99999999}},"isIntGt10-59":{paras:!0,messages:function(){return"* 请输入10-59之间的整数～"},reg:function(e,t){return this.optional(t)||/^\d+$/.test(e)&&e>=10&&e<=59}},isIDCard:{paras:!0,messages:function(){return"* 请输入正确的身份证号码～"},reg:function(e,t){return this.optional(t)||/^(\d{18,18}|\d{15,15}|\d{17,17}[xX])$/.test(e)}},"isIntGt1-99999999":{paras:!0,messages:function(){return"* 请输入大于0的整数～"},reg:function(e,t){return this.optional(t)||/^\d+$/.test(e)&&e<=99999999&&e>0}}};$.each(e,function(e,t){t.reg&&$.validator.addMethod(e,function(e,i){return t.reg.call(this,e,i)})});
//扩展功能
var t={scan:function(t){var i=this;/*//过滤掉html注释
             sHtml = oContext.html().replace(/<!--[\w\W\r\n]*?-->/gmi, '');
             //提前预览 验证规则
             usingRules = sHtml.match(/vali-[\w\d]+/g);
             //除掉重复rules
             usingRules = unique(usingRules);

             */
$.each(e,function(t,n){if(e.hasOwnProperty(t)){var r=e[t];
//添加或删除rules
i.addOrRemoveRules(t,r)}else console.error("验证插件中没有配置"+t+"此验证项")})},
//添加或删除rules
addOrRemoveRules:function(e,t){var i=this,n=e,r=t.paras,s=t.messages(),a=$(i.currentForm).find("[class*=vali-yes]");a.each(function(){var e=$(this);
//未加过,有class，   添加规则
if(e.data("valiCache")&&e.data("valiCache")[n]||!e.hasClass("vali-"+n))e.data("valiCache")&&e.data("valiCache")[n]&&!e.hasClass("vali-"+n)&&(e.rules("remove",n),delete e.data("valiCache")[n],$.isEmptyObject(e.data("valiCache"))&&e.data("valiCache",void 0));else{var t={};t[n]=r,t.messages={},t.messages[n]=s,e.rules("add",t),e.data("valiCache")||e.data("valiCache",{}),e.data("valiCache")[n]=!0}})},
//验证特殊元素  ，如select ,  图片
valiSpecail:function(e){var t=this,i=e.isYes(),n=e.jqueryInputElement;i?(n.val(1),t.element(n)):(n.val(""),t.element(n))}},i={
//cache: {},
init:function(e){var i=e.where,n=i.validate({focusCleanup:!0,ignore:":hidden ,.ignore",joinValid:".vali-join",errorClass:"validateErrorTip",errorPlacement:function(e,t){var i=t.closest(".vali-item").find(".vali-error");e.appendTo(i)},onfocusout:function(e){$(e).valid()}});
//继承
return $.extend(n,t),n}};return i}();
//# sourceURL=validata.js
/**

 @Name: layer拓展类，依赖于layer
 @Date: 2014.08.13
 @Author: 贤心
 @Versions：1.8.5-ext
 @Api：http://sentsin.com/jquery/layer
 @Desc: 本拓展会持续更新

 */
/*layer.use("skin/layer.ext.css", function () {
    layer.ext && layer.ext()
}), */
layer.prompt=function(e,t,i){var n={},e=e||{},r={area:["auto","auto"],offset:[e.top||"",""],title:e.title||"信息",dialog:{btns:2,type:-1,msg:'<input type="'+function(){return 1===e.type?"password":2===e.type?"file":"text"}()+'" class="xubox_prompt xubox_form" id="xubox_prompt" value="'+(e.val||"")+'" />',yes:function(i){var r=n.prompt.val();""===r?n.prompt.focus():r.replace(/\s/g,"").length>(e.length||1e3)?layer.tips("最多输入"+(e.length||1e3)+"个字数","#xubox_prompt",2):t&&t(r,i,n.prompt)},no:i},success:function(){n.prompt=$("#xubox_prompt"),n.prompt.focus()}};return 3===e.type&&(r.dialog.msg='<textarea class="xubox_prompt xubox_form xubox_formArea" id="xubox_prompt">'+(e.val||"")+"</textarea>"),$.layer(r)},layer.tab=function(e){var e=e||{},t=e.data||[],i={type:1,border:[0],area:["auto","auto"],bgcolor:"",title:!1,shade:e.shade,offset:e.offset,move:".xubox_tabmove",closeBtn:!1,page:{html:'<div class="xubox_tab" style="'+function(){return e.area=e.area||[],"width:"+(e.area[0]||"500px")+"; height:"+(e.area[1]||"300px")+'">'}()+'<span class="xubox_tabmove"></span><div class="xubox_tabtit">'+function(){var e=t.length,i=1,n="";if(e>0)for(n='<span class="xubox_tabnow">'+t[0].title+"</span>";e>i;i++)n+="<span>"+t[i].title+"</span>";return n}()+'</div><ul class="xubox_tab_main">'+function(){var e=t.length,i=1,n="";if(e>0)for(n='<li class="xubox_tabli xubox_tab_layer">'+(t[0].content||"content未传入")+"</li>";e>i;i++)n+='<li class="xubox_tabli">'+(t[i].content||"content未传入")+"</li>";return n}()+'</ul><span class="xubox_tabclose" title="关闭">X</span></div>'},success:function(e){var t=$(".xubox_tabtit").children(),i=$(".xubox_tab_main").children(),n=$(".xubox_tabclose");t.on("click",function(){var e=$(this),t=e.index();e.addClass("xubox_tabnow").siblings().removeClass("xubox_tabnow"),i.eq(t).show().siblings().hide()}),n.on("click",function(){layer.close(e.attr("times"))})}};return $.layer(i)},layer.photos=function(e){var t,i,n,r,s,a,o,l;if(e=e||{},t={imgIndex:1,end:null,html:$("html")},i=$(window),n=e.json,r=e.page,n){if(s=n.data,1!==n.status)return void layer.msg("未请求到数据",2,8);if(t.imgLen=s.length,!(s.length>0))return void layer.msg("没有任何图片",2,8);t.thissrc=s[n.start].src,t.pid=s[n.start].pid,t.imgsname=n.title||"",t.name=s[n.start].name,t.imgIndex=n.start+1}else a=$(r.parent).find("img"),o=a.eq(r.start),t.thissrc=o.attr("layer-img")||o.attr("src"),t.pid=o.attr("pid"),t.imgLen=a.length,t.imgsname=r.title||"",t.name=o.attr("alt"),t.imgIndex=r.start+1;return l={type:1,border:[0],area:[(e.html?915:600)+"px","auto"],title:!1,shade:[.9,"#000",!0],shadeClose:!0,offset:["25px",""],bgcolor:"",page:{html:'<div class="xubox_bigimg"><img src="'+t.thissrc+'" alt="'+(t.name||"")+'" layer-pid="'+(t.pid||"")+'"><div class="xubox_imgsee">'+function(){return t.imgLen>1?'<a href="" class="xubox_iconext xubox_prev"></a><a href="" class="xubox_iconext xubox_next"></a>':""}()+'<div class="xubox_imgbar"><span class="xubox_imgtit"><a href="javascript:;">'+t.imgsname+" </a><em>"+t.imgIndex+"/"+t.imgLen+"</em></span></div></div></div>"+function(){return e.html?'<div class="xubox_intro">'+e.html+"</div>":""}()},success:function(e){t.bigimg=e.find(".xubox_bigimg"),t.imgsee=t.bigimg.find(".xubox_imgsee"),t.imgbar=t.imgsee.find(".xubox_imgbar"),t.imgtit=t.imgbar.find(".xubox_imgtit"),t.layero=e;var i=t.imgs=t.bigimg.find("img");clearTimeout(t.timerr),t.timerr=setTimeout(function(){$("html").css("overflow","hidden").attr("layer-full",t.index)},10),i.load(function(){t.imgarea=[i.outerWidth(),i.outerHeight()],t.resize(e)}),t.event()},end:function(){layer.closeAll(),t.end=!0}},t.event=function(){t.bigimg.hover(function(){t.imgsee.show()},function(){t.imgsee.hide()}),l.imgprev=function(){t.imgIndex--,t.imgIndex<1&&(t.imgIndex=t.imgLen),t.tabimg()},t.bigimg.find(".xubox_prev").on("click",function(e){e.preventDefault(),l.imgprev()}),l.imgnext=function(){t.imgIndex++,t.imgIndex>t.imgLen&&(t.imgIndex=1),t.tabimg()},t.bigimg.find(".xubox_next").on("click",function(e){e.preventDefault(),l.imgnext()}),$(document).keyup(function(e){if(!t.end){var i=e.keyCode;e.preventDefault(),37===i?l.imgprev():39===i?l.imgnext():27===i&&layer.close(t.index)}}),t.tabimg=function(){var i,r,o,l,u;t.imgs.removeAttr("style"),n?(l=s[t.imgIndex-1],i=l.src,r=l.pid,o=l.name):(u=a.eq(t.imgIndex-1),i=u.attr("layer-img")||u.attr("src"),r=u.attr("layer-pid")||"",o=u.attr("alt")||""),t.imgs.attr({src:i,"layer-pid":r,alt:o}),t.imgtit.find("em").text(t.imgIndex+"/"+t.imgLen),t.imgsee.show(),e.tab&&e.tab({pid:r,name:o})}},t.resize=function(n){var r,s={},a=[i.width(),i.height()];s.limit=a[0]-a[0]/a[1]*(60*a[0]/a[1]),s.limit<600&&(s.limit=600),r=[s.limit,a[1]>400?a[1]-50:400],r[0]=e.html?r[0]:r[0]-300,layer.area(t.index,{width:r[0]+(e.html?15:0),height:r[1]}),s.flwidth=r[0]-(e.html?300:0),t.imgarea[0]>s.flwidth?t.imgs.css({width:s.flwidth}):t.imgs.css({width:t.imgarea[0]}),t.imgs.outerHeight()<r[1]&&t.imgs.css({top:(r[1]-t.imgs.outerHeight())/2}),t.imgs.css({visibility:"visible"}),t.bigimg.css({width:s.flwidth,height:r[1],"background-color":e.bgcolor}),e.html&&n.find(".xubox_intro").css({height:r[1]}),s=null,a=null,r=null},i.on("resize",function(){t.end||(t.timer&&clearTimeout(t.timer),t.timer=setTimeout(function(){t.resize(t.layero)},200))}),t.index=$.layer(l),t.index},layer.photosPage=function(e){var t={};t.run=function(t){layer.photos({html:e.html,success:e.success,page:{title:e.title,id:e.id,start:t,parent:e.parent}})},e=e||{},$(e.parent).find("img").each(function(e){$(this).on("click",function(){t.run(e)})})};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
